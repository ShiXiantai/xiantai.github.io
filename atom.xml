<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>脑洞星球</title>
  <icon>https://www.gravatar.com/avatar/c8305fc6885c456153d510e05276ff22</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nd.ataisxt.cn/"/>
  <updated>2018-09-21T03:04:31.166Z</updated>
  <id>https://nd.ataisxt.cn/</id>
  
  <author>
    <name>Xiantai Shi</name>
    <email>sxiantai@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用户名、密码等15个常用的js正则表达式</title>
    <link href="https://nd.ataisxt.cn/2018/09/21/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://nd.ataisxt.cn/2018/09/21/正则表达式/</id>
    <published>2018-09-21T02:56:00.000Z</published>
    <updated>2018-09-21T03:04:31.166Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 用户名、密码等15个常用的js正则表达式：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>用户名、密码等15个常用的js正则表达式<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p><strong>1 用户名正则</strong></p><p>//用户名正则，4到16位（字母，数字，下划线，减号）</p><pre><code>var uPattern = /^[a-zA-Z0-9_-]{4,16}$/;</code></pre><p>//输出 true</p><pre><code>console.log(uPattern.test(&quot;iFat3&quot;));</code></pre><p><strong> 2 密码强度正则</strong></p><p>//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</p><pre><code>var pPattern = /^.*(?=.{6,})(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/;</code></pre><p>//输出 true</p><pre><code>console.log(&quot;==&quot;+pPattern.test(&quot;iFat3#&quot;));</code></pre><p><strong>3 整数正则</strong></p><p>//正整数正则</p><pre><code>var posPattern = /^\d+$/;</code></pre><p>//负整数正则</p><pre><code>var negPattern = /^-\d+$/;</code></pre><p>//整数正则</p><pre><code>var intPattern = /^-?\d+$/;</code></pre><p>//输出 true</p><pre><code>console.log(posPattern.test(&quot;42&quot;));</code></pre><p>//输出 true</p><pre><code>console.log(negPattern.test(&quot;-42&quot;));</code></pre><p>//输出 true</p><pre><code>console.log(intPattern.test(&quot;-42&quot;));</code></pre><p><strong>4 数字正则</strong></p><p>可以是整数也可以是浮点数</p><p>//正数正则</p><pre><code>var posPattern = /^\d*\.?\d+$/;</code></pre><p>//负数正则</p><pre><code>var negPattern = /^-\d*\.?\d+$/;</code></pre><p>//数字正则</p><pre><code>var numPattern = /^-?\d*\.?\d+$/;console.log(posPattern.test(&quot;42.2&quot;));console.log(negPattern.test(&quot;-42.2&quot;));console.log(numPattern.test(&quot;-42.2&quot;));</code></pre><p><strong>5 Email正则</strong></p><p>//Email正则</p><pre><code>var ePattern = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;</code></pre><p>//输出 true</p><pre><code>console.log(ePattern.test(65974040@qq.com));</code></pre><p><strong>6 手机号码正则</strong></p><p>//手机号正则</p><pre><code>var mPattern = /^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d{8}$/;</code></pre><p>//输出 true</p><pre><code>console.log(mPattern.test(&quot;18600000000&quot;));</code></pre><p><strong>7 身份证号正则</strong></p><p>//身份证号（18位）正则</p><pre><code>var cP = /^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/;</code></pre><p>//输出 true</p><pre><code>console.log(cP.test(&quot;11010519880605371X&quot;));</code></pre><p><strong>8 URL正则</strong></p><p>//身份证号（18位）正则</p><pre><code>var cP = /^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/;</code></pre><p>//输出 true</p><pre><code>console.log(cP.test(&quot;11010519880605371X&quot;));</code></pre><p><strong>9 IPv4地址正则</strong></p><p>//ipv4地址正则</p><pre><code>var ipP = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;</code></pre><p>//输出 true</p><pre><code>console.log(ipP.test(&quot;115.28.47.26&quot;));</code></pre><p><strong>10 十六进制颜色正则</strong></p><p>//RGB Hex颜色正则<br>    var cPattern = /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/;<br>//输出 true</p><pre><code>console.log(cPattern.test(&quot;#b8b8b8&quot;));</code></pre><p><strong>11 日期正则</strong></p><p>//日期正则，简单判定,未做月份及日期的判定</p><pre><code>var dP1 = /^\d{4}(\-)\d{1,2}\1\d{1,2}$/;</code></pre><p>//输出 true</p><pre><code>console.log(dP1.test(&quot;2017-05-11&quot;));</code></pre><p>//输出 true</p><pre><code>console.log(dP1.test(&quot;2017-15-11&quot;));</code></pre><p>//日期正则，复杂判定</p><pre><code>var dP2 = /^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/;</code></pre><p>//输出 true</p><pre><code>console.log(dP2.test(&quot;2017-02-11&quot;));</code></pre><p>//输出 false</p><pre><code>console.log(dP2.test(&quot;2017-15-11&quot;));</code></pre><p>//输出 false</p><pre><code>console.log(dP2.test(&quot;2017-02-29&quot;));</code></pre><p><strong>12 QQ号码正则</strong></p><p>//QQ号正则，5至11位</p><pre><code>var qqPattern = /^[1-9][0-9]{4,10}$/;</code></pre><p>//输出 true</p><pre><code>console.log(qqPattern.test(&quot;65974040&quot;));</code></pre><p><strong>13 微信号正则</strong></p><p>//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</p><pre><code>var wxPattern = /^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/;</code></pre><p>//输出 true</p><pre><code>console.log(wxPattern.test(&quot;RuilongMao&quot;));</code></pre><p><strong>14 车牌号正则</strong></p><p>//车牌号正则</p><pre><code>var cPattern = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/;</code></pre><p>//输出 true</p><pre><code>console.log(cPattern.test(&quot;京K39006&quot;));</code></pre><p><strong>15 包含中文正则</strong></p><p>//包含中文正则</p><pre><code>var cnPattern = /[\u4E00-\u9FA5]/;</code></pre><p>//输出 true</p><pre><code>console.log(cnPattern.test(&quot;42度&quot;));</code></pre></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 用户名、密码等15个常用的js正则表达式：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;用户名、密码等15个常用的js正则表达式&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://nd.ataisxt.cn/categories/front-end/"/>
    
    
      <category term="js正则表达式" scheme="https://nd.ataisxt.cn/tags/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Web基础，JavaScript，JQuery</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E9%9D%A2%E8%AF%95%E9%A2%98Web%E5%9F%BA%E7%A1%80-JavaScript-JQuery/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/面试题Web基础-JavaScript-JQuery/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-29T04:52:03.654Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Web基础，JavaScript，JQuery：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>Web基础，JavaScript，JQuery<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>1.XML和HTML的联系</p><pre><code>XML：可扩展(自定义)标签语言，标签、属性、标签之间的嵌套关系均可扩展，作用是存储/传输数据HTML：超文本标签语言，标签、属性、标签之间的嵌套关系均固定(W3C)，作用是显示数据，可以将HTML理解为标签固定的XML</code></pre><p>2.JS有哪些内部对象</p><pre><code>String对象、Number对象、Boolean对象、Array对象、Math对象、Date对象、RegExp对象 Function对象</code></pre><p>3.JS的外部对象(BOM与DOM)</p><pre><code>由JS的运行环境提供的对象，JS的运行环境是浏览器，也就是由浏览器提供的对象，浏览器提供了两组对象：BOM和DOM。BOM：浏览器对象模型,用来访问和操纵浏览器窗口,使JavaScript有能力与浏览器&quot;对话&quot;，对象的引用是window，window对象是访问BOM和DOM的入口。window对象的属性和方法：使用时可以省略windowDocumen：窗口中显示的HTML文档对象。Screen屏幕：这个属性代表当前浏览器屏幕信息，如分辨率等等。Location位置：代表当前浏览器的地址栏，用于切换地址拦。History屏幕：代表浏览器地址栏中的历史记录。Navagator领航员：包含当前浏览器的元数据信息，如厂商，版本等。DOM：当网页被加载时，浏览器会创建页面的文档对象模型，用来操作文档，定义了访问和操作HTML文档的标准方法, 应用程序通过对DOM树的操作, 来实现对HTML文档数据的操作。DOM提供了查找节点、读取节点信息、修改节点信息、创建新节点、删除节点等操作。</code></pre><p>4.JS知识补充</p><pre><code>1.JS中没有方法的重载，JS根据方法名调用方法，和参数无关。2.在方法中，可以使用arguments获取全部的方法参数，没传递的变量，默认值是未定义undefined。3.arguments对象：arguments对象是一种特殊对象,在函数代码中,表示函数的参数数组，在函数代码中可以使用arguments访问所有参数4.方法是一个对象的属性，可以任意的替换为新方法。5.直接声明的函数是window对象的方法，直接声明的变量是window对象的属性。</code></pre><p>5.定时器</p><pre><code>浏览器提供了定时器功能，其底层的本质是线程，定时器是并发执行的，可以在网页中利用定时器处理并发问题。1：间隔执行定时器：按照一定固定间隔时间执行的方法Window提供了两个方法用于处理固定间隔执行setInterval()启动定时器，clearImterval()取消定时器。2：执行一次的定时器：用于处理延迟功能setTimeout()启动，clearTimeout()清除。</code></pre><p>6.Jquery是什么，JQuery的使用步骤，什么是Jquery对象</p><pre><code>JQuery是一个javaScript框架，最大的特点是利用选择器查找要操作的节点(DOM对象)，并且将找到的节点封装成一个JQuery对象，通过调用Jquery对象提供的方法，来操作底层的节点，这样做可以简化代码，兼容性更好。引入Jquery的js文件，利用选择器查找要操作的节点，调用jquery对象提供的方法。jQuery为了解决浏览器的兼容问题而提供的一种封装后的对象描述, jQuery提供的方法都是针对jQuery对象特有的, 而且大部分方法的返回值类型也是jQuery对象, 所以方法可以联缀调用jQuery对象.方法().方法().方法()...jQuery对象与DOM对象的关系：jQuery对象本质上是一个DOM对象数组, 它在该数组上扩展了一些操作数组中元素的方法</code></pre><p>7.JQuery有哪些选择器</p><pre><code>1.基本选择器：元素选择器，类选择器，id选择器。2.层次选择器：3.过滤选择器：根据元素的基本特定定位元素, 常用于表格和列表。4.内容过滤选择器：根据文本内容定位元素。5.可见性过滤选择器：根据可见性定位元素。6.属性过滤选择器：根据属性定位元素。7.状态过滤选择器：根据状态定位元素。8.表单选择器：:text  匹配文本框  :password  匹配密码框 等等。9.子元素过滤选择器： </code></pre></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Web基础，JavaScript，JQuery：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;Web基础，JavaScript，JQuery&lt;br&gt;
    
    </summary>
    
      <category term="interview" scheme="https://nd.ataisxt.cn/categories/interview/"/>
    
    
      <category term="Web基础，JavaScript，JQuery" scheme="https://nd.ataisxt.cn/tags/Web%E5%9F%BA%E7%A1%80%EF%BC%8CJavaScript%EF%BC%8CJQuery/"/>
    
  </entry>
  
  <entry>
    <title>WEB前端JQuery</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E5%89%8D%E7%AB%AFJQuery/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/前端JQuery/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-20T06:07:29.098Z</updated>
    
    <content type="html"><![CDATA[<p><strong> WEB前端JQuery：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>WEB前端<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><p>##JQuery</p><p>####什么是JQuery</p><ul><li>是一个通过JavaScript代码写的 关于JavaScript的框架</li><li>用来简化js代码</li><li>可以像css一样通过选择器获取元素</li><li>可以快速修改元素的样式</li></ul><p>####如何引入jQuery</p><ul><li><p>因为jQuery就是一个js文件 所以引入方式和引入一个普通的js文件一样</p><pre><code>&lt;script type=&quot;text/javascript&quot;     src=&quot;../js/jquery-1.4.2.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>####jQuery对象和js对象互相转换</p></li></ul><ol><li><p>把js转成jq</p><pre><code>/* 得到js对象 */</code></pre><p> var input = document.getElementById(“myinput”);<br> /<em> 把js对象转成jQuery对象 </em>/<br> /<em> $是jQuery单词的缩写  $=jQuery </em>/<br> var $jq = $(input);<br> /<em> 弹出文本框的value值 </em>/</p></li><li><p>把jq转成js</p><pre><code>/* 得到jq对象 */</code></pre><p> var $jq = $(“#myinput”);<br> /<em> 把jq转成js对象 </em>/<br> //第一种写法<br> var js1 = $jq[0];<br> //第二种写法<br> var js2 = $jq.get(0);<br> alert(js1.value+”=”+js2.value);</p></li></ol><p>###选择器</p><p>####基础选择器</p><ol><li>标签名选择器<br> var $div = $(“div”);    </li><li>id选择器<br> var $div = $(“#id”);    </li><li>类选择器<br> var $div = $(“.class”);    </li><li>分组选择器<br> var $div = $(“div,#id,.class”);    </li><li>任意元素选择器<br> var $div = $(“*”);<br>###层级选择器</li><li>$(“div span”) 匹配div下所有的span元素</li><li>$(“div&gt;span”) 匹配div的所有span子元素</li><li>$(“div+span”) 匹配div相邻的后面的兄弟span元素 </li><li>$(“div~span”) 匹配div后面所有的兄弟span元素<br>###层级函数 当得到某个元素对象后 需要获得该元素的相关元素的时候使用</li><li>获取元素的所有兄弟元素<br> $(“#abc”).siblings(“div”);  </li><li>获取元素的哥哥元素<br> $(“#abc”).prev(“div”);</li><li>获取元素的哥哥们元素<br> $(“#abc”).prevAll(“div”);</li><li>获取元素的弟弟元素<br> $(“#abc”).next(“div”); </li><li>获取元素的弟弟们元素<br> $(“#abc”).nextAll(“div”);<br>###过滤选择器</li><li>$(“div:first”)匹配所有div中的第一个  </li><li>$(“div:last”)匹配所有div中的最后一个  </li><li>$(“div:even”)匹配所有div中的偶数 从0开始</li><li>$(“div:odd”)匹配所有div中的奇数 从0开始</li><li>$(“div:eq(n)”) 匹配所有div中下标等于n的 从0开始</li><li>$(“div:lt(n)”) 匹配所有div中下标小于n的 从0开始</li><li>$(“div:gt(n)”) 匹配所有div中下标大于n的 从0开始</li><li>$(“div:not(.abc)”  匹配所有div中class值不等于abc<br>###内容选择器</li><li>$(“div:has(p)”) 匹配所有包含p标签的div</li><li>$(“div:empty”) 匹配所有空的div</li><li>$(“div:parent”)匹配所有非空的div</li><li>$(“div:contains(‘abc’)”) 匹配包含abc文本内容的div<br>###可见选择器</li><li>$(“div:hidden”) 匹配所有隐藏的div</li><li>$(“div:visible”)匹配所有可见的div<br>###显示隐藏相关的函数</li><li>让隐藏的元素显示<br> $(“div:hidden”).show();</li><li>让显示额元素隐藏<br> $(“div:visible”).hide();</li><li>切换隐藏和显示状态<br> $(“#abc”).toggle();<br>###属性选择器</li><li>$(“div[id]”) 匹配所有有id属性的div元素</li><li>$(“div[id=’abc’]”) 匹配有id属性值为abc的所有div</li><li>$(“div[id!=’abc’]”) 匹配有id属性值不为abc的所有div<br>###子元素选择器 </li><li>$(“div:nth-child(n)”) 获取div中第n个子元素 从1开始</li><li>$(“div:first-child”) 获取div中第1个子元素</li><li>$(“div:last-child”) 获取div中最后一个子元素<br>###表单选择器</li><li>$(“:input”) 匹配所有 文本框 密码框 单选 多选 下拉选 文本域 按钮</li><li>$(“:password”) 匹配所有密码框</li><li>$(“:radio”)匹配所有单选</li><li>$(“:checkbox”)匹配所有多选（复选框）</li><li>$(“:checked”)匹配所有被选中的 单选、多选、下拉选</li><li>$(“input:checked”) 匹配所有被选中的 单选、多选</li><li>$(“:selected”) 匹配被选中的下拉选</li></ol><p>###和页面(DOM)相关</p><ol><li>创建元素<br> var div = document.createElement(“div”);<br> var $div = $(“<div>abc</div>“);</li><li><p>添加到页面中<br> $(“#big”).append($div); //添加到最后面<br> $(“#big”).prepend($div);//添加到最前面</p></li><li><p>插入元素<br> 兄弟元素.after(新元素) 加载兄弟元素的后面<br> 兄弟元素.before(新元素) 加载兄弟元素的前面</p><pre><code>//添加到二哥前面 before$(&quot;h1:contains(&apos;二&apos;)&quot;).before($h1);//添加到二哥的后面 after$(&quot;h1:contains(&apos;二&apos;)&quot;).after($h1);</code></pre></li><li><p>删除元素</p></li></ol><ul><li>通过自己删除  $(“#id”).remove();</li><li>先匹配到所有的指定类型元素 从里面删除某些元素 $(“div”).remove(“#abc”);</li></ul><ol start="5"><li><p>修改元素的样式css<br> $(“div”).css(“color”,”red”);</p></li><li><p>属性<br> $(“#abc”).attr(“id”); 获取id的属性值<br> $(“#abc”).attr(“class”,”aaa”); 给元素添加class属性值为aaa</p></li><li><p>文本<br> $(“#abc”).text()  获取文本内容<br> $(“#abc”).text(“啊啊啊”) 赋值文本内容</p></li><li>html<br> $(“#abc”).html()  获取文本内容<br> $(“#abc”).html(“<h1>啊啊啊</h1>“) 赋值文本内容</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; WEB前端JQuery：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;WEB前端&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://nd.ataisxt.cn/categories/front-end/"/>
    
    
      <category term="JQuery" scheme="https://nd.ataisxt.cn/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>前端WEB框架</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E5%89%8D%E9%9D%A2Web%E6%A1%86%E6%9E%B6/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/前面Web框架/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-22T20:43:43.200Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 前端WEB框架：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>WEB前端<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>刘国斌 77331283   <a href="mailto:bjliugb@tedu.cn" target="_blank" rel="noopener">bjliugb@tedu.cn</a></the></p><p>###网站的架构</p><ul><li><p>CS：Client Server 客户端和服务端</p><p>  移动客户端：Android和iOS<br>  电脑客户端：windows和linux、Mac OS<br>  客户端是由客户端工程师开发<br>  服务端功能：给客户端提供数据<br>  应用场景： 京东、淘宝、唯品会</p></li><li><p>BS：Browser Server 浏览器和服务端</p><p>  浏览器<br>  服务端功能： 给浏览器提供数据 和 页面<br>  应用场景： 页游<br><img src="web01-1.png" alt=""></p></li><li>将来工作 BS和CS架构都会涉及，但是只需要掌握BS架构 CS就会了</li></ul><p>###课程介绍</p><p><img src="web01-2.png" alt=""></p><p>###前端课程介绍</p><ol><li>HTML ： 用来勾勒出页面的结构和内容(骨架)</li><li>CSS ： 用来美化页面 </li><li>JavaScript： 让页面呈现动态效果和动态数据的</li><li>JQuery：用来简化JavaScript代码的</li></ol><p>###HTML<br>    Hyper Text Markup Language：超文本标记语言 </p><ul><li>什么是超文本：不仅仅是文本，还包括文本的字体颜色，样式 还包括多媒体（图片，音频，视频）</li><li>html学习内容： 学习有哪些固定的标签，还有标签内部有哪些属性和标签和标签之间的嵌套关系</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 前端WEB框架：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;WEB前端&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://nd.ataisxt.cn/categories/front-end/"/>
    
    
      <category term="WEB" scheme="https://nd.ataisxt.cn/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>WEB前端JavaScript</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E5%89%8D%E7%AB%AFJavaScript/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/前端JavaScript/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-20T06:06:51.647Z</updated>
    
    <content type="html"><![CDATA[<p><strong> WEB前端JavaScript：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>WEB前端<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><p>##JavaScript  简称JS</p><pre><code>html搭建页面结构和内容  CSS用来美化页面  JS给页面添加动态效果或显示动态内容</code></pre><p>###JS历史</p><pre><code>1995年由网景（NetScape）公司发布 LiveScript 同年改名为 JavaScript，和Java没啥关系主要为了蹭热度</code></pre><p>###JS特点</p><ul><li>属于脚本语言 不需要编译 由浏览器解析执行</li><li>JS可以嵌入到Html文件中 </li><li>JS是基于面向对象语言</li><li>JS属于弱类型语言<br>###JS优点</li><li>交互性： 可以直接和用户进行交互</li><li><p>安全性： JS语言只能访问浏览器内部内容，不能访问浏览器以外内容(指磁盘中的各种数据)<br>###如何在html文件中嵌入js代码</p><pre><code>&lt;!-- 1. 在元素的事件中添加js代码 --&gt;</code></pre>  <input type="button" value="点我试试" onclick="alert('第一种引入方式成功！')"></li></ul><pre><code>&lt;!-- 2. 通过script标签添加js代码  可以写在任意位置--&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        alert(&quot;第二种引入方式&quot;);    &lt;/script&gt; &lt;!-- 3.通过单独的*.js文件写js代码 以下方式引入 引入文件后    不能在当前script标签体内写js代码  --&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;first.js&quot;&gt;        //这个位置不能再写js代码    &lt;/script&gt;</code></pre><p>##JavaScript语法</p><p>###数据类型</p><ol><li>数值类型（number）</li><li>字符串类型(string)</li><li>布尔值类型(boolean)</li><li>undefined (未定义)</li><li>对象类型  null<br>###变量的声明和赋值</li></ol><ul><li><p>因为js属于弱类型语言 声明变量的时候不需要指定类型，直接赋值即可</p><p>  var x = 18;<br>  var s = “abc”;<br>  s = 20;<br>  var b = true/false;<br>  var y;</p></li><li>如果变量只声明没有赋值 则此变量的类型为undefined 值也是undefined。</li></ul><p>####数值类型 </p><ul><li>在js中所有的数值底层都是浮点型， 在使用过程中会自动转换整数或小数<pre><code>int x = 5/2; x=?(在java中结果是2)   var x= 6/2; 3var x = 5/2; 2.5</code></pre></li><li><p>NaN（Not a Number）：不是一个数 ，用来判断一个变量是否为数值类型 判断方式通过isNaN()函数判断,当变量不是数的时候为true，是数为false</p><pre><code>isNaN(20);  falseisNaN(&quot;aaa&quot;); true</code></pre><p>####字符串</p><ul><li>通过单引号或双引号修饰一个字符串，例如：var s1 = ‘abc’; var s2=”abc”;</li></ul></li></ul><p>####布尔值</p><ul><li>值为true和false<br>####undefined</li><li>此类型只有一个值为undefined，变量声明但未定义的话为undefined<br>####null</li><li>null为对象类型的值    var p = null; </li></ul><p>###js各种类型间的隐式转换</p><ol><li>数值类型</li></ol><ul><li>转字符串： 18-&gt;”18”     “abc”+18   “abc18”</li><li>转布尔值：  0和NaN转false   其它所有数转true    </li></ul><ol start="2"><li>字符串</li></ol><ul><li>转数字：  “18”-&gt;18   “abc”-&gt;NaN  “18abc”-&gt;18</li><li>转布尔值: “”空字符串转成false  其它都是true</li></ul><ol start="3"><li>布尔值</li></ol><ul><li>转数字： true-&gt;1   false-&gt;0</li><li>转字符串：true-&gt;”true”    false-&gt;”false”    </li></ul><ol start="4"><li>undefined</li></ol><ul><li>转数字  NaN     21+undefined= NaN  NaN和任何数值进行运算都得NaN</li><li>转布尔值  undefined-&gt;false   </li><li>转字符串 undefined-&gt;”undefined”</li></ul><ol start="5"><li>null</li></ol><ul><li>转数字  null-&gt;0</li><li>转布尔值    null-&gt;false </li><li>转字符串 null-&gt;”null”    “abc”+null = “abcnull”</li></ul><p>###测试 在页面中添加两个按钮点击时 弹出 “66”+6  和 “66”-6 的结果</p><p>###运算符</p><ul><li>js中运算符和Java中的基本一致</li><li><p>==和===：==会在比较两端变量数值之前先将变量类型统一，统一后再比较值.===会先比较类型是否相等如果相等再比较数值如果不等就直接false<br>“666”==666  true     “666”===666  false</p></li><li><p>typeof  获取变量的类型    typeof 234234+6 = “number6”</p></li><li>除法运算会自动根据结果转换整数还是小数<br>###语句<br>包括：if else while do while for switch case</li><li>条件如果不是布尔类型会自动转换成布尔类型</li><li><p>for 中 把int改成var， js中不支持增强for循环(foreach)</p><pre><code>for(var i=0;i&lt;10;i++){}</code></pre><p>###函数(方法)</p></li></ul><p>public String run(String name,int age){<br>        return “abc”;<br>}</p><ul><li><p>格式一：</p><pre><code>function 函数名(参数列表){    return 18;}</code></pre><p>  例如：</p><pre><code>function fun(name,age){    return &quot;abc&quot;;}</code></pre></li><li><p>格式二：</p><pre><code>var 函数名 = function(参数列表){    return &quot;abc&quot;;}</code></pre><p>####和页面元素相关的函数</p></li></ul><ol><li>得到页面元素对象的函数<br> var x = document.getElementById(“id”);</li><li><p>获取value值或给value赋值</p><p> var z = x.value;    x.value=”abc”;</p></li><li><p>给元素添加文本内容</p><p> x.innerText=”abc”;    </p></li><li><p>给元素添加html代码</p><p> x.innerHTML=”</p><h1>abc</h1>“;<p></p></li></ol><h3 id="String-内容介绍"><a href="#String-内容介绍" class="headerlink" title="String 内容介绍"></a>String 内容介绍</h3><p>String  数组  日期对象  正则 </p><p>####字符串强转成数值</p><ul><li>parseFloat: 把字符串转成整数或小数</li><li>parseInt:  把字符串/小数 转成整数</li><li>Number：等效parseFloat</li></ul><p>###String常用Api</p><ol><li><p>字符串创建的方式</p><p> var str1 = “abc”;<br> var str2 = new String(“abc”);</p></li><li>转大写和转小写<br> toUpperCase()  toLowerCase();</li><li><p>查找字符串出现的位置</p><p> str.indexOf(‘a’)获取a在str中第一次出现的位置<br> str.lastIndexOf(“a”)获取z在str中最后一次出现的位置</p></li><li>截取字符串<br> str.substring(start,[end]);  //end可以省略 </li><li>替换字符串<br> str.replace(old,new);</li><li>拆分字符串<br> str.split(“:”) a:b:c  [a,b,c]</li></ol><p>####数值函数</p><ol><li>四舍五入    num.toFixed(2);//参数表示保留几位小数</li></ol><p>####数组相关函数</p><ol><li>创建数组<br> var arr1 = [“刘备”,50,true];<br> var arr2 = new Array();//空数组</li><li>数组中添加元素<br> arr.push(“小明”);<br> arr.push(18);</li><li>获取数组中的数据arr[2];</li><li>获取数组长度和修改长度 arr.length arr.length=3;</li><li>数组反转 arr.reverse();</li><li>数组排序 arr.sort();</li><li><p>默认排序规则：按照每一个字符的unicode编码进行排序，比较完第一个字符比较第二个，把数值当成字符串进行排序</p></li><li><p>自定义排序：</p><p> var arr = [10,5,3,25,22,29,8,18,15]; /<em> 使用默认排序规则排序 / //arr.sort(); //alert(arr); / 自定义规则 </em>/ function sortfn(a,b){ //return a-b;//升序 return b-a;//降序 } arr.sort(sortfn);</p></li></ol><p>###日期相关函数</p><ol><li><p>创建时间对象得到客户端时间</p><p> var d = new Date();</p></li><li><p>创建时间对象指定时间 var d2 = new Date(“2018/08/02 12:38:22”);</p></li><li>获取和设置时间戳(距1970年1月1号 8：00:00) d2.getTime(); d2.setTime(1000);</li><li><p>获取时间分量</p><ul><li>/* 从完整时间年月日时分秒中提取时间分量 / </li><li>console.log(d.getFullYear());//年 </li><li>console.log(d.getMonth());//月 从0开始 需要+1 </li><li>console.log(d.getDate());//日 </li><li>console.log(d.getDay());//星期几 </li><li>console.log(d.getHours());//小时 </li><li>console.log(d.getMinutes());//分钟 </li><li>console.log(d.getSeconds());//秒</li><li>/ 得到年月日 / </li><li>console.log(d.toLocaleDateString());</li><li>/ 得到时分秒 */ </li><li>console.log(d.toLocaleTimeString());</li></ul></li></ol><p>###正则表达式</p><ol><li>场景：1. 查找内容 2. 校验文本</li><li>. 匹配任意字符（除了换行）</li><li>\w 匹配任意字母、数字、下划线</li><li>\d 匹配任意数字</li><li>\s 匹配任意空白</li><li>^ 开始</li><li>$ 结束</li><li>正则表达式的创建方式 var reg1 = /表达式/模式； i忽略大小写 g全局查找 var reg2 = new RegExp(“表达式”,”模式”)模式参数可省略 表达式\需要转义</li><li>相关属性<ul><li>reg.exec(str); //查找内容    查一次得到一个 没有则返回null </li><li>reg.test(str); //校验文本</li><li>str.match(reg);//查找内容 得到所有<ul><li>str.replace(reg,newStr)//查找内容并替换</li></ul></li></ul></li></ol><p>####事件的取消</p><ul><li><p>在元素的事件中如果执行 return false 则取消当前事件</p><pre><code>&lt;a href=&quot;http://tmooc.cn&quot; onclick=&quot;return false&quot;&gt;Tmooc&lt;/a&gt;</code></pre><p>###失去焦点事件</p></li><li>失去焦点以文本框为例，当光标离开的时候，此事件触发<br>  <input type="text" onblur=""><br>###控制元素的隐藏和显示</li></ul><ol><li>display:block/inline/inline-block/none(隐藏 脱离文档流)</li><li>visibility：hidden(隐藏 不脱离文档流)/visible（显示） </li></ol><p>###自定义对象</p><pre><code>/* 通过声明函数的形式声明一个对象 */function Person(name,age){//声明属性this.name=name;this.age=age;//声明方法this.run=function(){    alert(&quot;name=&quot;+this.name+&quot; age=&quot;+this.age);}}//创建对象var p = new Person(&quot;貂蝉&quot;,85);p.run();/* 声明空对象 */function SuperMan(){}//创建对象 var sman = new SuperMan();//添加属性sman.name=&quot;克拉克&quot;;sman.age=18;//添加方法sman.fly = function(){    alert(&quot;我叫&quot;+this.name+&quot;今年&quot;            +this.age+&quot;岁，我在飞&quot;);}//调用方法sman.fly();/* 第二种声明对象的方式 *//* 以声明变量的形式创建对象 */var p = {        &quot;name&quot;:&quot;吕布&quot;,        &quot;age&quot;:25,        &quot;run&quot;:function(){            alert(&quot;name&quot;+this.name+&quot; age=&quot;+this.age);        }}//调用对象的方法p.run();</code></pre><p>###DHTML</p><ul><li>简介： Dynamic(动态) HTML，不是一门新技术，把HTML，CSS，JavaScript整合到一起得到的一门动态页面技术 </li><li>DHTML包括： BOM Browser浏览器 Object对象 Model模型 和 DOM Document文档  Object对象 Model模型 </li><li>BOM： 浏览器对象模型，包括一些和浏览器相关的对象和函数 </li><li>DOM： 文档对象模型，包括一些和页面相关的对象和函数 </li></ul><p><img src="web09.png" alt=""></p><p>###BOM的相关内容</p><p>####window<br>    window中所有的属性和函数，调用时可以把window省略掉，window中的属性称为全局属性，函数称为全局函数</p><ul><li><p>window的全局函数</p><p>  parseFloat/parseInt()<br>  alert();//弹出框<br>  confirm();//确认框<br>  prompt();//弹出文本框<br>  isNaN();</p></li><li>window的全局属性</li></ul><ol><li><p>location（地址）：<br> location.href 可以获取和设置浏览器当前的显示地址</p><p> location.reload()  页面刷新</p></li><li>history（历史）：<br> history.length 得到当前窗口访问过的页面数量<br> history.forward() //访问下一个页面<br> history.back() // 访问上一个页面<br> history.go(num) 前往某个页面 0代表当前页面，1代表下个页面，2代表下两个页面 -1 代表上一个 -2 代表上两个页面</li><li>screen（屏幕）：<br> width/height: 获取屏幕的分辨率<br> availWidth/availHeight：获取屏幕可用分辨率</li><li>navigator（导航、帮助）<br> navigator.userAgent 获取浏览器的版本信息</li></ol><p>####window相关的事件</p><ol><li>点击事件</li><li>加载完成事件</li><li>获取到焦点事件</li><li><p>失去焦点事件</p><pre><code>/* 窗口点击事件 *//* onclick = function(){    //alert(&quot;窗口被点击了&quot;);    location.href=&quot;http://tmooc.cn&quot;;} *//* 页面加载完成时执行 */onload = function(){    var input = document.getElementById(&quot;ip1&quot;);    input.value=&quot;abc&quot;;}/* 获取和失去焦点事件 */onblur = function(){    console.log(&quot;失去焦点&quot;);}onfocus = function(){    console.log(&quot;得到焦点&quot;);}</code></pre><p>####eval()函数</p></li></ol><ul><li>可以将字符串以js代码的形式执行</li></ul><p>####通过js给元素添加css样式</p><pre><code>div.style.css样式属性名称 = &quot;属性的值&quot;;</code></pre><p>###定时器</p><ul><li><p>通过定时器可以实现 每隔一段时间执行某些代码</p></li><li><p>var id = setInterval(函数,3000);//每隔3秒执行函数</p></li><li>clearInterval(id);//停止定时器</li><li>setTimeout(函数,2000);//两秒后执行函数    </li></ul><p>###DOM</p><ul><li>DOM 文档对象模型，学习dom主要掌握如果对html中的标签进行增删改查操作<br>####查找元素</li><li>通过id查找  document.getElementById(“id”);</li><li>通过标签名查找  document.getElementsByTagName(“标签名”);</li><li>通过元素的name属性查找 document.getElementsByName(“name属性的值”);</li><li>通过元素的class属性查找 document.getElementsByClassName(“class属性的值”);</li><li>获取body元素  document.body<br>####通过层级关系查找元素</li></ul><ol><li>获取元素的上级元素 parentElement; </li><li>获取元素的下级内容（包括元素和文本内容和换行） childNodes</li><li>获取元素的兄弟 x.parentElement.childNodes;</li></ol><p>###创建元素</p><pre><code>var h1 = document.createElement(&quot;h1&quot;);</code></pre><p>###添加元素到某个元素里面</p><pre><code>父元素.appendChild(新元素);</code></pre><p>###插入元素到某个元素的上面</p><pre><code>父元素.insertBefore(新元素,弟弟元素);</code></pre><p>###删除元素<br>    父元素.removeChild(被删除的元素);</p><p>###事件相关</p><p>####事件分类</p><ol><li>鼠标事件： onclick(点击)  onmouseover(鼠标移动到元素上面) onmouseout(鼠标移出元素)  onmousedown(在元素上鼠标按下) onmouseup(在元素上鼠标松手) onmousemove(在元素上移动)</li><li>键盘事件： onkeydown（键盘按下） onkeyup(键盘松开)</li><li>状态改变事件：onchange(value值发生改变的事件) onload（页面加载完成事件） onfocus(获得焦点事件) onblur(失去焦点事件) onsubmit(表单提交事件) onresize(窗口尺寸改变事件)<br>####事件绑定</li><li>在元素标签中添加 <input type="text" onkeydown="downfn()"></li></ol><ul><li>此种方式添加事件 ，事件函数中的this代表的是window 如果需要用到事件对应的元素可以在标签中调用函数的时候传递过去一个this 此时的this代表元素自身</li></ul><ol start="2"><li>动态绑定事件<br> /<em> 动态绑定事件 </em>/<pre><code>/* mybtn.onclick = function(){    alert(&quot;动态绑定成功！&quot;);} */mybtn.onclick = myfn;</code></pre></li></ol><ul><li>动态绑定的事件，事件函数中的this代表事件对应的元素</li></ul><p>####Event对象</p><ul><li>通过Event对象可以得到和事件相关的信息</li></ul><ol><li>可以通过event得到鼠标点击屏幕的坐标  event.clientX event.clientY</li><li>可以通过event得到键盘按键的编码 event.keyCode</li><li><p>通过event获得事件源 （事件源指添加事件的元素）</p><p> /* 通过event得到事件源  存在兼容性问题 </p><pre><code>有的浏览器支持target 有的支持srcElement通过以下写法可以保证任何浏览器都能正常执行*/var obj = event.target||event.srcElement;alert(&quot;标签名称：&quot;+obj.nodeName);</code></pre><p>####事件传递（事件冒泡）</p></li></ol><ul><li>如果同一个区域有多个事件响应，响应的顺序类似气泡，从下往上，也就是从底层元素往上级元素执行，这个过程称为事件传递</li><li>如果页面中有多个元素需要添加事件，可以把事件添加在它们共同的上级元素上面，然后获得事件源，通过判断事件源来处理不同的事件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; WEB前端JavaScript：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;WEB前端&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://nd.ataisxt.cn/categories/front-end/"/>
    
    
      <category term="JavaScript" scheme="https://nd.ataisxt.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>API,SE</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E9%9D%A2%E8%AF%95%E9%A2%98API-SE/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/面试题API-SE/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-29T04:48:05.800Z</updated>
    
    <content type="html"><![CDATA[<p><strong> API,SE：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>API,SE<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>API,SE<br>1.HashMap与HashTable的区别</the></p><pre><code>HashMap为非线程安全的，效率高，HashTable为线程安全的，效率低HashMap中null可以作为键，可以有一个或多个键对应的值为null，HashTable中key和value都不允许为nullHashMap采用的是Iterator的遍历方式，而HashTable采用的则是一种古老的Enumeration迭代器遍历方式哈希值的使用不同, HashTable直接使用对象的hashCode  而HashMap重新计算hash值HashTable中的hash数组默认大小是11 增长方式是old*2+1  HashMap中的hash数组默认是16 而且一定是2的指数</code></pre><p>2.ArrayList，LinkedList，vector的区别和特性</p><pre><code>ArrayList:用数组实现；存储空间连续分布 ；查找基于数组索引操作，速度快性能好；增删操作基于数组扩缩容，速度慢性能差。LinkedList:用链表实现；存储空间分散分布 ；查找基于链表上下指针（两端顺着指针链向中间找），速度慢，尤其链表中部查找慢；增删操作基于链表指针重建，速度块性能好，尤其首尾增删块。ArrayList和vector都是基于数组实现的查询效率高，增删效率低，ArrayList是非线程安全的而vector是线程安全的，因此ArrayList效率比vector效率高</code></pre><p>3.String与StringBuilder，StringBuffer的区别</p><pre><code>String:       final修饰的不可被继承，不可变字符串，重写了equalsStringBuilder: 变长字符串，线程不安全，效率高，没有重写equalsStringBuffer:  变长字符串，线程安全的，效率低，没有重写equals</code></pre><p>4.简述“==”和“equals”的区别以及为什么我们要重写equals</p><pre><code>对于引用类型而言，”==”判断的是地址，即：两个引用是否指向同一个对象 对于大部分引用类型而言，equals是基于”==”进行判断的，因此这使得equals没有太大的意义，因此，在实际开发中，我们需要根据具体的业务要求重写equals方法，例如：String重写了equals 判断的是两个字符串的内容是否完全一致。</code></pre><p>5.Collection和Collections的区别</p><pre><code>Collection是集合类的上级接口，继承于它的接口主要有Set和ListCollections是针对集合类的一个工具类，它提供了一系列静态方法实现针对各种集合的搜索，排序，线程安全化等操作</code></pre><p>6.HashMap工作原理</p><pre><code>HashMap工作原理：1.通过key的hashcode 进行算列算法——》找对应的散列桶2.对桶中所有K-V对的K进行equals     --如果有为true的说明为同一个key——》替换value    --如果都为false则在此桶对应的链表中追加元素3.hashcode不同但是散列算法计算出的对应桶    equals判断一定为false    --&gt;散列桶 影响性能；</code></pre><p>7.队列和栈的区别</p><pre><code>队列：java.util.Queue 队列，用于储存一组元素，但是存取元素必须遵循先进先出原则栈：存放一组元素，存取必须遵循先进后出原则  一般应用与操作的可追溯性(后退功能)双缓冲队列   解决并发效率低的问题  存取时的互斥问题BlockingQueue&lt;String&gt; messageQueue = new LinkedBlockingQueue&lt;String&gt;();</code></pre><p>8.重写equals方法和hashcode方法的规则</p><pre><code>当两个key的hashcode值一样，意味着他们在散列桶(HashMap中维护的数组)的相同位置，但若着两个key  equals比较结果不true，则在HashMap中就会形成链表，这样的情况多了HashMap的查询性能会降低很多。所以应当妥善处理作为Key元素的类的equals方法与hashcode方法的重写一致性：应当与equals方法保持一致，即：当两个对象equals比较为true时，hashcode方法返回的数字必须相同，反过来则不是必须的，但应当尽量保证两个对象若hashcode方法返回的数字相同时equals比较也为true,否则在HashMap中会出现链表影响性能查询稳定性：在参与equals比较的属性值没有发生过变化的前提下多次调用hashcode方法返回的数字不能变化。  </code></pre><p>9.常见的异常，异常的分类</p><pre><code>异常分为检查异常(编译异常)和非检查异常(运行异常)RuntimeException常见的异常：NullPointerException ：当某对象的引用为null，调用该对象的方法时就会产生空指针异常ClassCastException：类造型异常，假设有类A和类B(A不是B的子类或父类)，O是A的实例，那么当强制将O构造为类B的实例时抛出，该异常经常被称为强制类型转换异常IndexOutOfBoundsException：下标越界异常，当访问某个序列的索引值小于0或大于等于序列大小时，抛出该异常ClassNotFoundException：找不到该类异常，当应用试图根据字符串形式的类名构造类，而遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常</code></pre><p>10.IO流的概述</p><pre><code>流的分类：按数据方向：输入流和输出流；按数据类型：字节流和字符流。常用的IO流：字符流：Reader：BufferedReader，InputStreamReader，FileReader        Writer：BufferedWriter，OutputStreamWriter，PrintWriter，FileWriter字节流：InputStream：FileInputStream，BufferedInputStream        OutputStream：FileOutputStream，BufferedOutputStream因为在硬盘上的所有文件都是以字节的形式进行传输或者保存的，包括图片等内容。但是字符流只是在内存中才会形成的，所以在开发中，字节流使用广泛。只要是处理存文本数据，就要有限考虑使用字符流，除此之外都是用字节流。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; API,SE：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;API,SE&lt;br&gt;
    
    </summary>
    
      <category term="interview" scheme="https://nd.ataisxt.cn/categories/interview/"/>
    
    
      <category term="API,SE" scheme="https://nd.ataisxt.cn/tags/API-SE/"/>
    
  </entry>
  
  <entry>
    <title>Servlet-JSP</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E9%9D%A2%E8%AF%95%E9%A2%98Servlet-JSP/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/面试题Servlet-JSP/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-29T04:57:17.313Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Servlet-JSP：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>Servlet-JSP<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>1.有哪些服务器，CS与BS的区别</p><pre><code>服务器：本质是一个软件，它能够用来运行其他软件，它和浏览器对等平级。常见的服务器有：Tomcat,JBoss,WebLogic,WebSphere。CS：客户端服务器程序，客户端需要单独开发及安装。BS：浏览器服务器程序，用浏览器充当客户端，不需要单独开发。</code></pre><p>2.什么是HTTP协议，如何通讯，数据格式是什么，常见的错误</p><pre><code>HTTP协议：是由W3C规定的一种规范，约定了浏览器和服务器之间如何通讯以及通讯的数据格式。如何通讯：建立连接，发送请求，接受响应，关闭连接，一次请求需要一次连接，尽量减少服务器的压力。数据格式：          1.请求数据包（浏览器--&gt;服务器）：请求行，请求头，实体内容。          2.响应数据包（服务器--&gt;浏览器）：状态行，消息头，实体内容。404：找不到资源  405：方法声明有误  500：类名有误.方法内有误</code></pre><p>3.Servlet的运行原理</p><pre><code>Servlet是Sun推出的用于在服务器端处理HTTP协议的组件。其特点是保存在服务端，满足Sun的规范，它可以动态的拼任何资源(网页，图片，文档等)。    1.浏览器与服务器建立连接,    2.浏览器将请求数据进行打包     3.浏览器给服务器发送请求    4.服务器将浏览器请求拆包    5.服务器自动创建request和response对象(每次请求都会新创建)    6.通信组件根据web.xml路径找到项目实例化Servlet对象(调用service方法 传入request和response) 7.Servlet调用request和response     8.response将响应数据传给通信组件     9.通信组件将数据打包    10.发送数据给浏览器      11.浏览器将数据拆包     12.断开连接</code></pre><p>4.Servlet类的层次结构，HttpServlet的结构</p><pre><code>Sun这样设计的目的是为了给程序员更多的选择空间，doXXX()中抛异常是为了强制让程序员重写它，一般重写protected void service()，并且去掉super.service，目的是避免调用doXXX(),避免抛异常。</code></pre><p>5.get和post请求的区别</p><pre><code>Get：采用路径传参，参数在传递过程可见，隐私性差，只能传递少量参数。Post：是实体内容传参，参数在传递过程不可见，隐私性好，传参没有限制。默认的请求方式是get请求，通常在查询时用get，因为查询时只需要传入少量条件，保存时用Post，因为保存时一般需要传入较多的数据。</code></pre><p>6.解决请求方式的中文乱码问题的三种方法</p><pre><code>1. get/post：让servlet接收乱码String, 用iso8859-1将其还原程byte,再用utf-8将其转成String  (new String(bytes, “utf-8”)) 优点：万能  缺点：麻烦2. get：在server.xml第65行, 加URIEncoding=&quot;utf-8&quot; 优点：简单 缺点：只能针对请求方式为get3. post： 在获取请求参数前, 加req.setCharacterEncoding(&quot;utf-8&quot;) 优点：简单 缺点：只能针对请求方式为post</code></pre><p>7.Servlet的生命周期</p><pre><code>1加载：容器通过类加载器使用Servlet类对应的文件来加载Servlet.2.创建：通过调用Servlet的构造函数来创建一个Servlet实例3.Servlet初始化：tomcat在实例化Servlet后, 会立刻调用init方法, 用这个方法给Servlet初始化(预置)一些数据4.处理客户请求：service()方法给服务器发送请求并接收服务器的响应 5.卸载：destory() tomcat正常关闭时, 会自动调用此销毁方法, 让Servlet释放其占用的资源, 在此方法内通常删除或重置一些数据1) 默认第一次访问Servlet时会创建并初始化它2) 可以修改成启动tomcat时就创建并初始化它    在&lt;servlet&gt;&lt;/servlet&gt; 内设置&lt;load-on-startup&gt;1&lt;load-on-startup&gt;   1代表在当前项目中此Servlet创建时初始化的顺序3) 对于某个类型的Servlet来说, 第1、2、4步只会执行一次, 第3步可以执行多次, 因此某个类型的Servlet在tomcat内只有一个实例, 即单例</code></pre><p>8.重定向和转发的区别</p><pre><code>都是解决2个WEB组件之间的跳转问题，WEB组件：Servlet、JSP重定向：二次请求，地址改变，2个组件使用2个request，不能通过他们共享数据，可以重定向到项目之外的组件。转发：一次请求，地址不变，2个组件共用1个request，可以通过request共享数据，只能转发给项目内部的组件。转发的过程：获取转发器，实现转发。转发之后, 地址栏地址不会发生变化, 原因是转发的过程是发生在服务器内部的, 浏览器并不知道。request.getRequestDispatcher(uri).forward(request,response);一般查询时使用转发，增，删，改后重定向到查询页面。</code></pre><p>9.config和context的区别，典型的使用场景</p><pre><code>Config：config和Servlet是1对1的关系，服务器初始化Servlet前会给它先创建一个config对象，每个Servlet都会有一个对应的config对象。Context：context和Servlet是1对多的关系，服务器启动时会自定创建唯一的一个context，所有Servlet公共的数据存入context。Config典型的使用场景：1.假设要做一个网页游戏, 要限制在线人数2.在用户登录时判断是否已经达到了上限maxOnline，3.该参数应该是可以配置的, 并且仅仅是在登录的Servlet中使用, 因此使用config即可Context典型的使用场景：1.项目中包含很多查询功能, 如查询员工, 部门；2.这些查询功能一般都有分页；3.每页显示的行数(size)是需要可配置4.由于该参数多个功能都要共用, 所以要使用context读取Context的特殊用法：1.可以在程序运行的任何阶段用它来存取变量2.其存储的变量可以在多个Servlet间共用  案例：统计网站流量</code></pre><p>10.Cookie和Session的区别及用途</p><pre><code>Cookie保存在浏览器上，默认浏览器关闭，Cookie失效，存储数据量小，只能存储字符串，服务器压力小，但安全性低，一般数据存入Cookie，。Session保存在服务器上，默认30分钟未访问，Session失效，存储数据量大，存储的数据格式没有限制，访问量大的时候服务器压力大，但安全性高，重要数据存入Session。用途：因为多个请求之间无法通过request共享数据，多个Servlet之间无法通过config共享数据，而且服务器里只有一个context，存储同名的数据有冲突，所以要使用cookie和session，多个请求之间可以共享这2个对象中的数据，多个Servlet之间可以共享这2个对象中的数据，服务器会给每一个浏览器创建一套cookie和session。由于HTTP是无状态协议（服务器没有记住浏览器），cookie和session是用来管理状态的（让服务器记住浏览器），用来证明浏览器访问过服务器。</code></pre><p>11.WEB-INF的作用</p><pre><code>由于浏览器访问服务器，获取并加载一个网页的过程中，包含了多次请求；WEB-INF具有保护功能，放在其内部的资源受到保护，避免被直接访问，必须通过转发访问。所以，如果JSP不放在WEB-INF下，则别人可以直接访问它；由于我们采用MVC模式，jsp数据来源于Servlet，直接访问它会报错；将它放在WEB-INF下就是要保护它，从而避免报错。注：静态资源(css,img...)是浏览及加载HTML时直接访问的，不存在转发，所以不能将他们放在WEB-INF下，否则就访问不到了。</code></pre><p>12.JSP有哪些内置对象，作用分别是什么</p><pre><code>JSP有9个基本内置对象，都是Jsp页面翻译后的Servlet类中建立的request浏览器请求，此请求会包含来自get/post请求的参数response服务器返回给浏览器的响应out用来传送回应的输出config Servlet的构架部件page JSP网页本身application Servlet正在执行的内容session 与请求有关的会话期pageContext 管理网页的属性exception 针对错误网页，未捕获的例外</code></pre><p>13.JSP和Servlet的区别和联系</p><pre><code>JSP：Sun公司制定的一种服务器端动态页面技术的组件规范, JSP是一个以&quot;.jsp&quot;为后缀的文件,在该文件中,主要是HTML和少量的Java代码。JSP是Servlet技术的拓展, 本质上是Servlet的简单方式，更强调应用的外表表达。Servlet和JSP最主要的不同点在于：Servlet的应用逻辑是在Java文件中，并且完全从表示层的HTML里分离开来，而JSP是Java和HTML，可以组合成一个扩展名为.jsp的文件，JSP侧重于视图，Servlet主要控制逻辑JSP被JSP引擎翻译后的源代码文件默认继承了HttpJspBase, 而抽象类HttpJspBase继承自抽象类HttpServlet, 因此JSP被翻译后可以看成是Servlet</code></pre><p>14.动态Include和静态Include的区别（JSP）</p><pre><code>Include指令的作用：在JSP页面转换成Servlet时, 能够将其他文件包含进来, 可以包含JSP文件也可以是静态的HTML文件，通过该语句能方便的在每个JSP页面中包含导航栏, 版权声明, logo等动态INCLUDE用jsp:include动作实现&lt;jsp:include page=”head.jsp”/&gt;它总是会检查所含文件中的变化, 适用于包含动态页面, 并且可以带参数, 各个文件分别先编译, 然后组合成一个文件; 静态INCLUDE用include伪码实现, 定不会检查所含文件的变化, 适用于静态页面&lt;%@include file=”include.html” %&gt; 先将文件的代码被原封不动的加入到主页面从而组合成一个文件, 然后再进行编译, 此时不允许有相同的变量执行时间上：静态INCLUDE是在翻译阶段执行  动态INCLUDE实在请求处理阶段执行引入的内容不同：引入静态文本(html.jsp), 在JSP页面被转化成servlet之前和它融合到一起, 动态INCLUDE引入执行页面或servlet所生成的应答文本</code></pre><p>15.EL和JSTL表达式的作用和联系</p><pre><code>由于JSP中嵌套的大量Java代码增加了页面内容的复杂度, 使得页面不够整洁, 不方便代码的维护, 为此Sun公司制定了JSP标签(类似于html标签)来代替java代码, Apache组织开发的一套标签库被Sun公司整合后, 称为标准标签库(JSP Standard Tag Library 即JSTL) 配合EL表达式, 以达到减轻JSP文件的复杂度, 方便维护JSP文件的目的EL表达式是一套简单的计算规则, 用于给JSP标签的属性赋值, 也可以直接用来输出表达式也可以脱离标签单独使用，使用EL表达式可以1.访问Bean的属性  2.输出简单的运算结果  3.获取请求参数。常见的标签：&lt;c:forEach var...&gt;,&lt;c:if var...&gt;,&lt;c:url var...&gt;,&lt;c:choose var...&gt;,&lt;c:when var...&gt;</code></pre><p>16.MVC开发模式</p><pre><code>MVC模式：MVC是经典常见的用户界面设计模式, 是代码分层思想：    1.M(Model)模型: 职责是负责业务逻辑，包含：业务数据和业务处理逻辑，比如实体类、Dao、Service都属于模型层。    2.V(View)视图: 职责是负责显示界面和用户交互(收集用户信息)。    3.C(Controller)控制器: 控制层, 用来处理请求, 进行调度, 使用它可以降低代码的耦合度,便于团队开发及维护。将原来一个WEB组件所做的事情, 拆分成2个组件一起做, 其中Servlet处理java部分的逻辑,JSP负责展现数据。</code></pre></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Servlet-JSP：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;Servlet-JSP&lt;br&gt;
    
    </summary>
    
      <category term="interview" scheme="https://nd.ataisxt.cn/categories/interview/"/>
    
    
      <category term="Servlet-JSP" scheme="https://nd.ataisxt.cn/tags/Servlet-JSP/"/>
    
  </entry>
  
  <entry>
    <title>WEB前端CSS</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E5%89%8D%E7%AB%AFCSS/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/前端CSS/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-20T06:06:54.214Z</updated>
    
    <content type="html"><![CDATA[<p><strong> WEB前端CSS：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>WEB前端<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><p>###CSS</p><ul><li>美化页面的技术</li><li>Cascading 层叠 Style 样式 Sheet 表 ： 层叠样式表，CSS用于美化html页面，html可以理解成盖房子，CSS相当于装修</li></ul><p>###CSS的引入方式</p><ol><li><p>内联样式：在标签内部通过 style属性添加样式，弊端：只能作用于一个元素，不能复用，几乎不使用</p><pre><code>&lt;div style=&quot;color: red;border: 1px solid green;&quot;&gt;我是一个div&lt;/div&gt;&lt;span style=&quot;color: purple;border: 1px solid pink&quot;&gt;我是一个span&lt;/span&gt;</code></pre></li><li><p>内部样式：在head标签内部通过 style子标签添加样式，好处：可以在本页面内复用样式，弊端：不能多个页面复用同一样式 ，工作中此种方式用的不多，但是学习的时候使用内部样式，主要是方便演示</p></li></ol><pre><code>&lt;style type=&quot;text/css&quot;&gt;    /* 标签名选择器 */    h3{        color: blue;        border: 2px solid yellow;    }&lt;/style&gt;</code></pre><ol start="3"><li><p>外部样式：样式代码写在单独的*.css文件中，通过link标签引入到某个html页面中，好处：样式可以复用在多个页面中</p><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;demo01.css&quot;&gt;css文件：@charset &quot;UTF-8&quot;;p{    color: red;    background-color: green;}</code></pre></li></ol><p>###三种引入方式的优先级</p><ul><li>如果三种引入方式作用的样式不同则全部生效</li><li>如果三种引入方式作用的样式相同则按照下面的优先级规则来决定到底哪个生效</li></ul><ol><li>内联优先级最高</li><li>内部和外部 后执行会覆盖先执行的</li></ol><p>###CSS的选择器</p><p>####基础选择器</p><ol><li>标签名选择器  </li></ol><ul><li>应用场景：当需要对页面中所有的某一种标签设置相同效果的时候<pre><code>标签名{    样式名称:值;    样式名称:值;}</code></pre></li></ul><ol start="2"><li>id选择器</li></ol><ul><li>通过标签的id属性找到对应的标签</li><li><p>应用场景：当需要对页面中的某一个元素设置样式的时候使用</p><pre><code>#标签id{    样式名称:值;    样式名称:值;}</code></pre></li></ul><ol start="3"><li>类选择器</li></ol><ul><li>通过标签的class属性找到对应的标签</li><li><p>应用场景：当需要对页面中的多个元素设置样式的时候使用</p><pre><code>.class{    样式名称:值;    样式名称:值;}</code></pre><p>####其它各种选择器</p></li></ul><ol><li>属性选择器</li></ol><ul><li><p>通过标签内部指定属性查找对应的标签</p><pre><code>标签名[属性名=&quot;属性值&quot;]{    样式名称:值;    样式名称:值;}</code></pre></li></ul><ol start="2"><li>派生选择器(后代选择器)</li></ol><ul><li><p>通过多个标签之间的上下级关系查找子元素和孙子元素和。。。。所有后代元素</p><pre><code>基础选择器 基础选择器 基础选择器{    样式名称:值;    样式名称:值;}</code></pre></li></ul><ol start="3"><li>子元素选择器</li></ol><ul><li><p>通过多个标签之间的上下级关系查找子元素。</p><pre><code>基础选择器&gt;基础选择器&gt;基础选择器{    样式名称:值;    样式名称:值;}</code></pre></li></ul><ol start="4"><li>分组选择器</li></ol><ul><li>分组选择器可以把多种选择器通过逗号连接到一起，给多个选择器设置相同的样式<pre><code>h3,p,.d1,#abc,#bcd{    color:red;}</code></pre></li></ul><ol start="5"><li>伪类选择器</li></ol><ul><li>用于选择元素的状态</li></ul><ol><li>visited：访问过的状态</li><li>link：未点击状态</li><li>hover：鼠标悬停状态</li><li>active：鼠标点击时的状态</li></ol><ul><li>使用方式：<pre><code>    /* 访问过的状态 */    a:visited {    color: red;}    /* 未点击状态 */    a:link {    color: yellow;}    /* 鼠标悬停状态 */    a:hover {    color: blue;}    /* 鼠标点击时的状态 */    a:active {    color: pink;}</code></pre></li></ul><ol start="6"><li>任意元素选择器</li></ol><ul><li><p>如果需要给页面中所有的元素设置相同的样式可以使用此选择器</p><pre><code>*{    样式名称:值;    样式名称:值;}</code></pre></li></ul><p>####如果多个选择器设置相同样式的效果时，作用范围越小优先级越高</p><p>###CSS中常用的属性</p><ul><li>已经接触的属性 color（字体颜色）background-color(背景颜色) border（边框）</li></ul><h4 id="元素的宽高："><a href="#元素的宽高：" class="headerlink" title="元素的宽高："></a>元素的宽高：</h4><ol><li>块级元素的默认高度为内容高度，默认宽度为父元素的宽度</li><li>行内元素的默认宽高为内容的宽高</li></ol><ul><li><p>只能修改块级元素的宽高，不能修改行内元素的宽高<br>####设置元素的颜色</p><pre><code>/*1. 通过颜色名称赋值 red yellow green blue pink purple white black orange gray*//*2. 6位16进制赋值 每两位表示一个颜色 红 绿 蓝   *//* background-color: #ff00ff; *//*3. 3位16进制赋值 每一位表示一个颜色  *//* background-color: #00f; *//*4. 通过3位 10进制赋值 每个取值0-255  *//* background-color:rgb(255,255,0); *//*5. 4位10进制赋值 第四位代表透明度取值0-1 */background-color: rgba(0,255,0,0.5);</code></pre><p>####设置元素的背景图片</p><pre><code>/* 设置背景图片 */background-image: url(&quot;../imgs/a.jpg&quot;);/* 设置背景图片的大小 参数为宽和高  */ background-size: 100px 100px;/* 设置背景图片不重复 */background-repeat: no-repeat;/* 设置背景图片的位置 left center right top bottom 第一个参数代表水平 第二个参数代表垂直*//* background-position: right center; *//* 通过百分比控制位置 */background-position:90% 90%;</code></pre></li></ul><p>###盒子模型</p><p>####外边距</p><ul><li>元素距离父元素或相邻兄弟元素的距离称为外边距</li><li><p>赋值方式：</p><pre><code>/* margin: 40px; 四个外边距都是40px *//* margin: 20px 50px; 上下20 左右50 *//* margin: 0 auto; 水平居中 */margin: 10px 30px 60px 90px;/* 顺时针 上右下左 */</code></pre></li><li>块级元素：上下左右都生效</li><li>行内元素：只有左右生效 上下不生效</li><li>外边距粘连问题： 当元素的上边缘和父元素的上边缘重合的时候，子元素的上外边距会带着父元素一起移动，通过在父元素中添加 overflow:hidden;解决。</li><li>上下外边距取最大值，左右外边距相加<br>####边框<br>  border: 粗细(像素值) 边框的样式(solid) 颜色<br>  /<em> border: 10px inset purple; </em>/<pre><code>border-bottom:5px solid yellow;border-left:5px solid pink;border-top:5px solid green;border-right:5px solid black;border-radius:55px;/*圆角 值越大越园  */</code></pre></li><li>块级元素： 上下左右边框全部生效，而且边框都会占显示区域</li><li>行内元素： 上下左右边框全部生效，但是只有左右边框才会占显示区域，上下不占显示区域（不会增加元素自身的高度）</li></ul><p>####内边距</p><ul><li>内容距离边框的距离    </li><li>给元素添加内边距会影响元素的宽高</li><li>移动元素内的子元素几种方式？ 两种：1. 给大的添加内边距（大的所占宽高会跟着改变） 2. 给小的添加外边距</li><li>移动元素内的文本的时候几种？ 一种：只能给大的添加内边距。</li><li>块级元素：内边距四个方向都生效，而且都会影响元素的显示范围</li><li>行内元素：内边距四个方向都生效，左右影响显示范围，上下不影响显示范围</li></ul><p>####块级元素和行内元素关于盒子模型的总结</p><ol><li>块级元素：可以设置宽高，外边距全部生效 并且影响元素的所占宽高, 边框四个方向都生效，并且影响元素的所占宽高，内边距全部生效，并且影响元素所占的宽高</li><li>行内元素：不可以设置宽高，外边距左右生效，上下不生效，边框都生效，上下不影响所占高度，内边距都有效果，左右影响所占宽度 上下不影响所占高度<br>###元素所占宽度计算公式<br>宽高为100*200 左外边距10 右外30  边框5px 左内8px 右内2px</li></ol><p>100+10+30+5*2+8+2<br>左外边距+左边框+左内边距+元素宽度+右内边距+右边框+右外边距</p><p>###文本相关的属性</p><pre><code>/* 文本相关属性 *//* 文本水平对齐方式 center/left/right */text-align: center;/* 文本修饰  none 没有 underline 下划线overline 上划线line-through 删除线*/text-decoration: line-through;/* 文本颜色 */color: red;/* 行高  通常让文本垂直居中的时候使用行高 */ line-height: 100px;/* 文本阴影   4个参数1. 阴影颜色 2和3是阴影的偏移值  4. 阴影的模糊度 值越小越清晰 0是不模糊*/text-shadow: #0f0 -15px 15px 1px;</code></pre><p>####字体相关属性</p><pre><code>/* 字体相关属性 */font-size: 20px;/* 字体粗细属性  normal 不加粗    bold 加粗    lighter 比普通细一些 */font-weight: lighter;/* 字体样式  可以设置多个值通过逗号分隔，以此检测哪个生效用哪个 */font-family: &quot;楷体&quot;;/* 设置斜体 */font-style: italic;</code></pre><p>###溢出设置 </p><ul><li><p>指子元素显示范围超出父元素范围时的设置</p><pre><code>/* visible(默认 超出显示)hidden: 超出不显示scroll:超出滚动显示  */overflow: hidden;</code></pre><p>###元素显示方式</p></li><li>block： 块级元素默认的显示方式，独占一行，可以修改宽高</li><li>inline：行内元素的默认显示方式，共占一行，不可以修改宽高</li><li>inline-block:行内块，共占一行 并且可以修改宽高</li></ul><p>###元素的定位</p><p>####position定位</p><p>#####静态定位（文档流定位）（默认）</p><ul><li>元素如果是块级元素则默认从上到下排列，如果是行内元素则从左向右排列</li><li>设置方式： position:static;<br>#####相对定位</li><li>相对于元素初始的位置，通过left/right/top/bottom让元素做位置的偏移</li><li>元素不会脱离文档流</li><li>场景：当元素需要从当前位置做位置偏移的时候，并且不希望其它元素跟着移动时使用此定位<br>#####绝对定位</li><li>会脱离文档流 后面有元素的话会顶上来</li><li>left/right/top/bottom 做位置偏移，相对于谁？ 1. 相对于窗口(没有祖宗或有祖宗但是没有做非static定位) 2. 相对于祖宗元素(有祖宗并且有某个祖宗做了非static定位，如果都做了，则就近原则)（如果仅仅是为了给子元素做位置的参考一般都使用relative）</li><li>场景：当元素需要相对于某个祖先元素或窗口做位置偏移的时候，并且不再占用原来的位置时使用此定位方式<br>#####固定定位</li><li>固定在窗口的某个位置，不会随着内容位置改变而改变</li><li>脱离文档流，left/right/top/bottom 坐标相对于窗口<br>####浮动定位</li><li>元素脱离文档流，元素在当前所在行内 左侧或右侧浮动，当撞到父元素边框或浮起来的兄弟元素边缘的时候</li><li>如果所有浮动的元素一行装不下会自动换行，但是如果有凸出的元素会有卡住的效果</li><li>如果元素浮动则后面的元素会往上顶(因为浮动会脱离文档流)，如果不希望后面的元素往上移动，则需要在后面紧邻的元素上添加clear属性设置both/left/right,禁止元素 两边/左/右 有浮动的元素。</li><li>如果元素的所有子元素全部浮动，并且元素没有设置高度，此时自动识别的高度为0，可以通过添加 overflow:hidden; 让元素能够识别出浮动后子元素的高度</li><li>应用场景：当多个纵向排列的元素需要改成横向排列的时候 使用浮动定位</li><li>练习： demo08.html 页面中添加一个无序列表把列表项改成横向排列<br>####行内元素的垂直对齐方式</li><li>默认对齐方式为基线对齐 vertical-align：baseline</li><li>top/middle/bottom</li></ul><p>###CSS的三大特性</p><ol><li>继承性：子元素可以继承父元素的部分属性，只能继承color/font-开头/text-文本相关/line- 此类型的属性，不仅仅子元素继承所有的后代元素都会继承</li></ol><ul><li>如果元素自身所带的样式和继承的冲突则以自身所带样式为准，如：h标签的字体大小，超链接的文本颜色和文本下划线</li></ul><ol start="2"><li>层叠性：通过不同的选择器可以多次指向同一个元素，如果设置的样式不同则全部生效，如果多个选择器设置的样式相同，则根据CSS的第三特性优先级来决定</li><li>优先级：</li></ol><ul><li>直接选中优先级高于间接选中(继承属于间接选中)</li><li>如果相同选择器，则后执行的覆盖前面的</li><li>不同选择器，作用范围越小 优先级越高    id&gt;class&gt;标签名&gt;继承<br>###CSS定位<br>####Position</li><li>position：static，静态定位（文档流定位）， 从上到下 从左向右</li><li>relative，相对定位：不脱离文档流，上右下左相对于元素初始位置</li><li>absolute，绝对定位：脱离文档流，相对于窗口或祖先元素</li><li>fixed，固定定位：脱离文档流，相对于窗口，固定在窗口的某个位置<br>####浮动定位<br>float:left/right; 元素会在当前所在行内左侧或右侧浮动</li><li>脱离文档流</li><li>如果后面的元素不想顶上去 添加 clear:left/right/both</li><li>如果元素所有子元素全部浮动的话 内容高度识别为0 通过添加overflow：hidden解决</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; WEB前端CSS：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;WEB前端&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://nd.ataisxt.cn/categories/front-end/"/>
    
    
      <category term="CSS" scheme="https://nd.ataisxt.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Mybatis-AJAX</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E9%9D%A2%E8%AF%95%E9%A2%98Spring-Mybatis-AJAX/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/面试题Spring-Mybatis-AJAX/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-29T05:07:01.366Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Spring-Mybatis-AJAX：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>Spring-Mybatis-AJAX<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>1.Spring是什么，特点是什么</p><pre><code>Spring是个Java企业级应用的开发框架，是个开源的，轻量级的应用开发框架，目的是为了简化企业级应用开发，并通过POJO为基础的编程模型促进良好的编程习惯。POJO对象：传统Java对象(满足JavaBean规范的Java对象)特点是：简化开发：spring对常用的API做了简化，比如对jdbc做了简化，我们使用spring jdbc来访问数据库，就不再需要考虑获取连接，关闭连接了。管理对象：spring提供了一个容器，可以帮我们管理对象与对象之间的关系，这样一来，对象之间的耦合度降低了，方便了代码的维护。集成：spring可以集成其他的一些框架，比如Mybatis。</code></pre><p>2.如何利用Spring容器创建对象</p><pre><code>Spring容器是spring框架中的一个核心模块，用于管理对象之间的关系。    1.利用无参构造器，启动容器，调用容器的getBean方法。    2.静态工厂方法，调用类的静态方法来创建对象。    3.实例工厂方法，调用对象的方法来创建对象。</code></pre><p>3.什么是IOC和DI</p><pre><code>IOC：控制反转，对象之间的依赖关系交给容器来创建。DI：依赖注入，容器通过调用对象提供的set方法或者构造器来建立对象之间的依赖关系。IOC是目标，DI是手段。优点：IOC或者DI把应用的代码量降到最低，它使应用容易测试，最小的代价和最小的侵入性使松散耦合得以实现。</code></pre><p>4.Spring Bean的作用域和生命周期的管理方法</p><pre><code>Spring beans是那些形成Spring应用的主干java对象，它们被spring容器初始化，装配和管理。这些beans通过容器中配置的数据创建。Srping的作用域：默认情况下，针对一个bean的配置，spring容器只会创建一个实例(既作用域为单例的singleton)，可以设置scope属性值为prototype，此时，会创建多个实例。Spring容器从XML文件中读取bean的定义，并实例化bean；spring根据bean定义填充所有的属性。Spring容器的生命周期：初始化方法通过init-method属性指定，销毁方法通过destroy-method属性来指定，也有相对应的注解：@PostConstruct和@PreDestroy，这两个注解来至javax.annotation包，使用之前要导入包。注：只有作用域为单例的bean销毁方法才会执行。</code></pre><p>5.什么是SpringMVC模式与SpringMVC的五大组件及执行原理</p><pre><code>MVC模式是常见的用户界面设计模式，Spring Web MVC是Spring提供的Web界面MVC组件，利用这个组件可以简化WEB界面的开发。SpringMVC组件：DispatcherServlet(前端控制器)(controller)，HandlerMapping，Controller(处理器)(Model)，ModelAndView，ViewResolver(视图解析器)。    1.DispatcherServlet收到请求后, 依据HandlerMapping的配置, 调用相应的Controller来处理。    2.Controller将处理结果封装到ModelAndView对象, 然后将该对象返回给DispatcherServlet来处理。注：ModelAndView对象包含有两部分数据, 一是处理结果, 另外还包含有视图名(就是一个字符串, 比如&quot;hello&quot;)。    3.DispatcherServlet依据ViewResolver的解析, 调用相应的视图对象(比如jsp)来生成相应的页面。</code></pre><p>6.从控制器传输数据到JSP的方式</p><pre><code>利用ModelAndView传输数据：如果需要将控制器中的传输到JSP页面，只需要将控制器方法的返回值设置成ModelAndView即可。其中，方法中的model代表发送到JSP界面的数据，view表示使用哪个JSP作为显示界面。利用HttpServletResuest传输数据：可以在控制器方法参数上注入HttpServletResuest对象，再利用这个对象的setAttribute方法将数据共享到JSP。两种方式各有好处：    1.HttpServletResuest方式：紧耦合，控制器方法紧紧绑定了Servlet API。紧耦合的时候，只能在Web容器中进行测试！但是可以调用Servlet底层的API。    2.返回ModelAndView方式：松耦合，控制器与Servlet API无关，可以脱离Web容器单独测试，可以方便的实现与平台无关的测试。控制器向浏览器发送数据可以利用ModelMap传递数据：只需要在控制器方法上添加ModelMap参数就可以简洁的向用户界面传递数据。</code></pre><p>7.从浏览器向控制器传送数据的三种方式</p><pre><code>Spring MVC Web请求提交数据到控制器有下面几种方式：    1.使用HttpServletRequest获取：在控制器方法上使用HttpServletRequest作为参数，在运行期间Spring MVC自动参数注入HttpServletRequest，在request上直接使用getParamter方法获取参数值。缺点：数据的编码，数据类型都需要手工处理，Servlet与控制器紧耦合，不方便独立测试。优点：可以直接访问Servlet底层API，可以获取通讯的底层详细信息，如读取请求头信息。    2.使用@RequestParam注解：使用控制器参数接受表单数据，控制器方法参数名与表单中输入框name属性一直，SpringMVC就自动将表单数据解码并且转换数据类型然后注入到变量中。    3.使用自动机制封装成Bean对象：Spring提供值对象方式传递表单参数，值对象用于封装用户名和密码。</code></pre><p>8.SpringMVC处理异常的两种方式</p><pre><code>软件的底层出现的异常抛到表现层就必须处理，Spring提供了三种处理异常的方式。    1.使用SpringMVC提供的简单异常处理器SimpleMappingExceptionResolver：添加异常处理界面；添加异常处理器配置，配置异常类型与错误界面的对应关系；在控制器中抛出异常时候，就转发到异常处理界面。    2.注解异常处理@ExceptionHandler：SpringMVC提供了在控制器内部处理异常的注解@ExceptionHandler，可以在控制器内部处理异常。</code></pre><p>9.Spring与Mybatis的整合</p><pre><code>Mybatis：Mybatis是开源的支持普通SQL查询，存储过程和高级映射的优秀持久层框架，封装了几乎所有的JDBC代码和参数的手工配置以及结果集的检索，使用简单的XML或注解做配置和定义映射关系，可以实现POJO对象与数据库之间的映射访问。MyBatis提供了mybatis-spring API，这个API可以将Mybatis整合到Spring，利用Spring IOC容器管理Mybatis的组件，可以简化Mybatis的使用和管理。</code></pre><p>10.Mybatis的基本原理</p><pre><code>1.SqlSessionFactory读取配置文件(SqlMapConfig.xml)主要包含dataSource和映射文件路径2.通过配置文件中的映射路径找到对应的映射文件3.创建预编译的statement 存放到Map里(key是sql的id)4.通过SqlSessionFactory创建SqlSession对象5.SqlSession调用相应的sql方法(第一个参数为映射文件中sql语句对应的id)6.依据sql语句对应的id获取对应的statement, 然后执行该对象的相应方法7.如果是查询, 会封装成相应的对象, 或者是对象的集合返回Map类型的结果    1.mybatis会将查询到的结果存放到Map对象里(一条记录对应一个Map对象, 其中字段名做为key, 字段值作为value)    2.接下来, 再将Map对象中的数据放到实体对象里面</code></pre><p>11.Mapper映射器是什么</p><pre><code>Mapper映射器就是符合Mybatis特定要求的接口, Mybatis会依据这些接口生成相应的实现对象，这些接口符合映射文件的要求：    1.方法名必须与sql语句的id一样    2.方法的返回类型与sql语句的返回类型一致    3.方法的参数类型与sql语句的参数类型一致    4.此外, 映射文件的namespace必须等于Mapper映射器(即要写这些接口的完整的名称)</code></pre><p>12.表的列名与实体属性不一致的解决办法</p><pre><code>默认情况下，Mybatis根据查询结果列名自动映射到结果对象的同名Bean属性，如果不一致，会有null值出现。当数据库表的列名与查询结果对象的属性不一致时候，可以采用别名映射和采用ResultMap映射。</code></pre><p>13.什么是扫描器对象，MapperScannerConfigurer</p><pre><code>Mybatis-Spring提供了一个自动创建Mapper接口匿名子类实例的扫描器MapperScannerConfigurer，这个Bean在实例化的时候，会自动将指定包中Mapper接口创建为Bean对象。原理：在Spring容器初始化的时候，会自动初始化扫描器MapperScannerConfigurer对象，这是扫描器会扫描指定包中的全部接口，并且自动创建此接口的匿名实例（反射）。有了这个扫描器，就可以直接从Spring中获取Mapper接口的匿名实例，直接访问其方法操作数据库了。</code></pre><p>14.什么是AJAX</p><pre><code>ajax(asynchronous javascript and xml)：是一种用来改善用户体验的技术, 其实质是利用浏览器提供的一个特殊的对象(XMLHttpRequest, 也可以称之为ajax对象)异步地向服务器发送请求, 服务器返回部分数据,浏览器利用这些数据对当前页面做部分更新。 整个过程, 页面无刷新, 不打断用户的操作。异步的是指这个对象在向服务器发送请求时,浏览器不会销毁当前页面, 用户仍然可以对当前页面做其它操作。</code></pre><p>15.AJAX的常用属性，方法，事件</p><pre><code>XMLHttpRequest 对象是浏览器内嵌的API，他提供了与与服务器通讯的功能，其常用属性和方法如下：属性：status：服务器响应状态码：200,404,500...      readyState：通讯过程状态码：0 1 2 3 4 (尚未初始化-正在发送请求-                 请求完成-请求成功正在获取数据-数据接收成功)      responseText：服务器返回的文本数据。方法：open(请求方式，URL)准备发起对服务器的请求      send()向服务器发送请求时间：onreadystatechange:通讯状态变化事件，当代表通讯状态的readyState     发生变化时，执行的事件方法。通常将XMLHttpRequest对象简称为：XHR</code></pre><p>16.AJAX的开发步骤</p><pre><code>1.创建ajax对象，var xhr=new XMLHttpRequest();2.利用open方法准备请求，xhr.open(&apos;get&apos;,&apos;check_uname.do&apos;)                             xhr.open(‘post’,url)     利用AJAX发送POST请求时，必须多一步设置HTTP请求头才能支持POST。     xhr.setRequestHeader(&apos;content-type&apos;,&apos; application/x-www-form-urlencoded&apos;);3.绑定通讯状态变化事件，当通讯状态readyState并且响应状态status为200时候表示服务器正常发送了数据，利用responseText获取服务器发回来的数据。    xhr.onreadystatechange = function(){};4.用send方法发起请求，xhr.send(null)，xhr.send(param).    利用AJAX技术可以在不更新页面的情况下与服务器进行交换数据，其经典使用场景：表单数据检查，自动完成等功能。</code></pre><p>17.什么是JSON</p><pre><code>JSON(JavaScript Object Notation)：是AJAX通讯中最常用的数据格式，服务器端将数据封装为JSON字符串，客户端将JSON字符串解析为JS对象。JSON字符串：符合JSON语法的字符串var str=’{“id”:1,”name”:”Tom”}’.JS中提供了两个API方法，可以将符合JSON语法的字符串转换成JS对象。var obj=eval(‘(’+str+’)’);  var obj=JSON.parse(str);</code></pre><p>18.JSON关键点总结，利用JSON交换数据</p><pre><code>JSON：用于声明JS对象的语法。JSON字符串：符合JSON语法的字符串。JSON字符串可以通过eval和JSON.parse转换为JS对象。利用JSON交换数据：在AJAX开发中为了将服务器端的数据发送到客户端浏览器,经常的做法是将数据序列为JSON字符串,然后将JSON字符串发送到客户端浏览器, 最后客户端浏览器在收到数据时候转换为JS对象,并且读取其信息利用JSON API转换Java对象到JSON字符串更加简洁方便，常用的API有Jackson-databind和json-lib ，导入JSON API。</code></pre><p>19.JQuery对AJAX的支持，常用的两种方式</p><pre><code>JQuery提供了非常简便的AJAX客户端调用支持，常用方法有：$.ajax({url:请求路径，type:请求方式，data:请求参数，dataType：服务器返回的数据类型，success:服务器处理正常对应的回调函数，error:服务器出错对应的回调函数，async:true(缺省)当值为false时发送同步请求})；$.getJSON(url,参数,callback)，$.post(url,参数,callback).</code></pre><p>20.什么是AOP，Aspect切面，AOP的常用用途</p><pre><code>AOP：面向切面编程，是一种编程技术，允许程序模块化横向切割关注点，面向切面编程可以不改变原有软件的逻辑情况下，为软件加入扩展功能。Spring AOP的底层是基于(JDK反射的)动态代理实现的。 Aspect切面：Spring内嵌支持AOP，AOP的核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。根据需求不同，一个应用程序可以有若干切面，在Spring AOP中，导入AspectJ包，切面通过带有@Aspect注解的类实现。常用用途：    1.性能审计    2.异常跟踪    3.事物处理Spring事物处理：声明式事物处理，无需编码，只需要使用注解声明事物的边界即可，AOP是非常好的编程事物的替代方案。默认情况下，Spring声明事务的方法，在相互调用的时候，事务会自动传播整合为一个事务过程。编程步骤：    1.在spring-mybatis.xml文件中配置事物管理器    2.配置注解事物支持           &lt;tx:annotation-driven transaction-manager=”txManager”/&gt;    3.使用事物注解标注业务层：@Transactional注解将业务层方法            看做一个事物，如果有异常抛出，则回滚到初始状态。</code></pre><p>21.各种拦截编程的区别</p><pre><code>Spring MVC拦截器、Servlet Filter过滤器、Spring AOP都是横截面编程Servlet Filter过滤器：可以拦截任何的WEB URL请求（*.jsp,*.js,*.css,*.html），如登陆以后才能看到图片(防盗链)。    Spring MVC拦截器：拦截Spring MVC的WEB URL请求。Spring AOP：拦截对业务层或数据层的请求。</code></pre><p>22.两种Spring容器的初始化方法</p><pre><code>1.DispatcherServlet：只使用Spring MVC，则DispatcherServlet即可。2.ContextLoaderListener：在过滤器的init方法中使用监听器初始化Spring容器，可以替代DispatcherServlet初始化功能，该方法必须与ContextLoaderListener配合才能正常获取Spring容器对象ctx，在web.xml配置Listener.public void init(FilterConfig cfg) throws ServletException {WebApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(cfg.getServletContext());}</code></pre><p>23.两种Spring Bean对象的获取方式</p><pre><code>1.注入Bean：当前Bean被Spring管理的情况下，可以使用注入。2.getBean：当前对象不被Spring管理，则需要getBean。</code></pre><p>24.简述什么是反射，反射机制提供的功能</p><pre><code>对于任意一个类，我们可以动态获取它的所有属性和方法，对于任意一个对象，我们都可以动态的调用它的任意一个属性和方法，对于这种动态获取类的信息以及动态调用对象属性和方法的功能称为反射机制。提供的功能：1运行时判断任意对象的所属类2运行时构造任意类的对象3运行时判断和调用对象的成员变量和方法4生成动态代理</code></pre></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Spring-Mybatis-AJAX：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;Spring-Mybatis-AJAX&lt;br&gt;
    
    </summary>
    
      <category term="interview" scheme="https://nd.ataisxt.cn/categories/interview/"/>
    
    
      <category term="Spring-Mybatis-AJAX" scheme="https://nd.ataisxt.cn/tags/Spring-Mybatis-AJAX/"/>
    
  </entry>
  
  <entry>
    <title>常见的几种设计模式</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/面试题常见的几种设计模式/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-29T05:06:58.962Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 常见的几种设计模式：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>常见的几种设计模式<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>单例模式</p><p>定义：</p><pre><code>确保一个类只有一个实例，而且自动化实例化并向整个系统提供这个实例</code></pre><p>满足要素：</p><pre><code>    1.私有的构造方法      2.指向自己实例的私有静态引用      3.以自己实例为返回值的静态的共有的方法单利模式根据自己实例化对象时机的不同分为两种：一种是饿汉式单例，一种是懒汉式单例。饿汉式单例在单例类被加载时，就实例化一个对象交给自己的引用，而懒汉式在调用取得实例化方法的时候才会实例化对象</code></pre><p>单例模式的优点：</p><pre><code>1.在内存中只有一个对象，节省内存空间  2.避免频繁的创建销毁对象，可以提高性能  3.避免对共享资源的多重使用  4.可以全局访问</code></pre><p>适用场景：</p><pre><code>1.需要频繁实例化然后销毁的对象  2.创建对象时耗时过多或者耗资源过多，但又经常用到的对象 3.有状态的工具类对象  4.频繁访问数据库或文件的对象 </code></pre><p>单例模式注意事项：</p><pre><code>1.只能使用单例类提供的方法取得单例对象，不要使用反射，否则将会实例化一个新对象  2.不要做断开单例类对象与类中静态引用的危险操作  3.多线程使用单例共享资源时，注意线程安全问题</code></pre><p>工厂方法模式</p><p>定义：</p><pre><code>定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类</code></pre><p>工厂模式根据抽象程度的不同分为三种：</p><pre><code>简单工厂模式(也叫静态工厂模式)、工厂方法模式、抽象工厂模式。工厂模式是编程中经常用到的一种模式。</code></pre><p>优点：</p><pre><code>可以使代码结构清晰，有效地封装变化，在编程中，产品类的实例化有时候是比较复杂和多变的，通过工厂模式，将产品的实例化封装起来，使得调用者根本无需关心产品的实例化过程，只需要依赖工厂即可得到自己想要的产品对于调用者屏蔽具体的产品类。如果使用工厂模式，调用者只关心产品的接口就可以了，至于具体的实现，调用者根本无需关心，即使变更了具体的实现，对于调用者来说没有任何影响降低耦合度，产品类的实例化通常是很复杂的，它需要依赖很多的类，而这些类对于调用者来说根本无需知道，如果使用了工厂方法，我们需要做的仅仅是实例化好产品类，然后交给调用者使用，对于调用者来说，产品所依赖的类都是透明的工厂模式依靠抽象架构的，它把实例化产品的任务由实现类完成，扩展性比较好，也就是说，当需要系统有比较好的扩展性时，可以考虑工厂模式，不同的产品用不同的实现工厂组装</code></pre><p>抽象工厂模式</p><p>定义：</p><pre><code>为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类</code></pre><p>抽象工厂模式与工厂方法模式的区别：</p><pre><code>抽象工厂模式是工厂方法模式的升级版本，他用来创建一组相关或相互依赖的对象，他与工厂方法模式的区别就在于，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则是针对的多个产品等级结构，在编程中，通常一个产品结构，表现为一个接口或者抽象类，也就是说，工厂方法模式提供的所有产品都是衍生自同一个接口或抽象类，而抽象工厂模式所提供的产品则是衍生自不同的接口或对象在抽象工厂模式中，有一个产品族的概念，所谓的产品族，是指位于不同产品等级结构中功能相关联的产品组成的家族，抽象工厂模式所提供的一系列产品就组成一个产品族；而工厂方法所提供的一系列产品称为一个等级结构</code></pre><p>抽象工厂模式的优点：</p><pre><code>除了具备工厂方法模式的优点外，最主要的优点就是可以在类的内部对产品族进行约束，所谓的产品族，一般或多或少的都存在一定的关联，抽象工厂模式就可以在类内部对产品族的关联关系进行定义和描述，而不必专门引入一个新的类来进行管理</code></pre><p>缺点：</p><pre><code>产品族的扩展将是一件十分费力的事情，如果产品族中需要增加一个新的产品，几乎所有的工厂都需要进行修改，所有使用抽象工厂模式时，对产品等级结构的划分是非常重要的无论是简单工厂模式，工厂方法模式，还是抽象工厂模式，他们都属于工厂模式，在形式和特点上也是极为相似的，他们的最终目的都是为了解耦，因此，在使用工厂模式时，只需要关心降低耦合度的目的是否达到了</code></pre><p>原型模式</p><p>定义：</p><pre><code>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象</code></pre><p>原型模式主要用于对象的复制，它的核心就是原型类Prototype，Prototype类只需要具备两个条件：</p><pre><code>1.实现Cloneable接口，就是在运行时通知虚拟机可以安全地在实现了此接口的类上使用clone方法，在Java虚拟机中，只有实现了这个接口的类才可以被拷贝，否则运行时会抛出CloneNotSupportedException异常2.重写Object类中的clone方法，在Java中，所以类的父类都是Object类，Object类中有一个clone方法，作用是返回对象的一个拷贝，但是其作用域prototype类型的，一般的类无法调用，因此，Prototype类需要将clone方法的作用域改为public类型的</code></pre><p> 原型模式的优点及适用场景：</p><pre><code>使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类中的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。使用原型模式的另一个好处是简化对象的创建，使得创建对象就像我们再编辑文档时复制粘贴一样简单</code></pre><p>原型模式的注意事项：</p><pre><code>使用原型模式复制对象不会调用类的构造方法。因为对象的复制是通过Object类的clone方法来完成的，它直接在内存中复制数据，因此不会调用类的构造方法。不但构造方法的代码不会执行，甚至连访问权限都对原型模式无效。单例模式中，只要将构造方法的访问权限设置为private型，就可以实现单例，但是clone方法直接无视构造方法的权限，所以，单例模式与原型模式是冲突的，在使用时要特别注意</code></pre><p>浅拷贝：</p><pre><code>Object类中的clone方法只会拷贝对象中的基本数据类型，对于数据，容器对象，引用对象等都不会拷贝，这就是浅拷贝</code></pre><p>深拷贝：</p><pre><code>如果要实现深拷贝，必须将原型模式的数组，容器对象，引用对象等另行拷贝发生深拷贝的有java中的8种基本类型以及他们的封装类型，另外还有String类型，其余都是浅拷贝</code></pre></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 常见的几种设计模式：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;常见的几种设计模式&lt;br&gt;
    
    </summary>
    
      <category term="interview" scheme="https://nd.ataisxt.cn/categories/interview/"/>
    
    
      <category term="常见的几种设计模式" scheme="https://nd.ataisxt.cn/tags/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据库和JDBC</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CJDBC/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/面试题数据库和JDBC/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-29T04:50:17.509Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 数据库和JDBC：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>数据库和JDBC<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>数据库和JDBC</the></p><pre><code>1.关系型数据库2.什么是内连接，外连接，自连接3.在数据库的条件查询中如何优化速度4.数据库中主键、外键的作用5.索引的优点和缺点是什么6.主键和索引的区别7.什么叫视图8.简述truncate，delete，drop之间的区别</code></pre><p>1.JDBC的开发步骤</p><pre><code>1：加载驱动，告诉它用哪个数据库厂商提供的实现类Class.forName(“”)2：添加配置参数：URL3：创建连接，Connection con = DriverManager.getConnection(“”);4：创建Statement或者PreparedStatement声明5：执行sql，获取ResultSet结果集，运行结果集的处理(遍历获取数据等等)6：关闭连接，释放资源 </code></pre><p>2.连接池的工作原理</p><pre><code>创建连接池后，它会自动初始化一批(初始化连接数)连接，这些连接的状态都是空闲态；调用连接池获取连接的方法，它会返回一个连接，并将此连接标记为占用态；调用连接关闭的方法，是将其归还给连接池，状态变为空闲态，内容清空；连接池发现连接快不够用(最小空闲连接)时，会再次初始化一批(每次增加连接数)空闲连接；连接池发现内部有太多(最大空闲连接数)的空闲连接时，会将一批(每次增加连接数)连接关闭(保留最小连接数)；当连接池内占用连接达到数据库极限(最大连接数)时，下次请求连接池会让其等待。</code></pre><p>3.statement和PreparedStatement的区别</p><pre><code>Statement适合执行静态(无条件)sql，statement是直接发送sql语句到数据库，事先没有进行预编译，这样会导致恶意注入sql的语句出现问题PreparedStatement适合执行动态(有条件)sql，preparestatement会将sql进行预编译，当sql语句要重复执行时，数据库会调用以前编译好的sql，所以preparestatement在性能方面会更好，preparestatement在执行sql时，会对传人的参数进行强制类型转换，以保证数据格式与底层数据格式一致</code></pre><p>4.什么是事务管理</p><pre><code>事务是一组原子操作单元，一般指要做或所做的事情特性：原子性：事物是一个完成的过程，要么都成功，要么都失败一致性：事务完成前后数据保持一致，既收支平衡隔离性：一个事务处理对另外一个事务没有影响，事务在处理过程中不能被外界访问持久性：事务一旦达成，便永久生效</code></pre><p>5.分页查询</p><pre><code>1.假分页(内存分页)：第一次查询时查出所有的数据，然后存入内存(List)，第N次查询时，直接从内存(List)中取数，特点第一次查询慢，后面快，耗内存，只适合数据量极少的项目。2.真分页(物理分页)：每次查询都是从数据库中取出一页(N条)数据，基于分页的SQL实现分页查询，特点每次查询速度一样，节约内存，适合所有项目。1.Oracle分页的SQL：select  *  from(    select  t.*,rownum  r  from(        Select  *  from  emps  order  by  empno    )  t)  where  r  between  11  and  202.Mysql分页的SQLSelect  *  from  emps  prder  by  empnoLimit  11,10    (第十一条记录开始，查询10条记录)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 数据库和JDBC：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;数据库和JDBC&lt;br&gt;
    
    </summary>
    
      <category term="interview" scheme="https://nd.ataisxt.cn/categories/interview/"/>
    
    
      <category term="数据库和JDBC" scheme="https://nd.ataisxt.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CJDBC/"/>
    
  </entry>
  
  <entry>
    <title>线程</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%BA%BF%E7%A8%8B/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/面试题线程/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-29T04:48:40.113Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 线程：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>线程<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>1.线程的两种方法和区别</p><pre><code>Thread：1.继承Thread,2.重写run方法,3.创建线程对象，调用start方法Runnable接口创建线程： 1.实现Runnable接口，实现run方法 2.创建接口的子类实例  3.创建线程对象，将接口的子类实例作为线程参数  4.调用start方法。启动线程两种方法的区别：    1.第一种由于要集成Thread，而java又是单继承原则，这就导致当前类不能再集成其他类，很多时候会在实际开发中出现继承冲突问题。    2.由于线程内部重写run方法定义了当前线程要执行的任务，这就导致了线程与任务有一个强耦合关系，不利于线程的重用。    3.使用Runnable接口创建线程的好处是，当前的类可以继承于其他的类，也可以继承其他的接口。</code></pre><p>2.sleep()和wait()的区别</p><pre><code>sleep属于Thread类中的方法，表示一个线程进入了睡眠状态，等待一定时间后，自动醒来进入到可运行状态，不会马上进入到运行状态，因为线程调度机制恢复线程的运行也需要时间，一个线程对象调用了sleep方法之后，并不会释放它所持有的对象锁，所以也就不会影响其他线程的运行，但在sleep的过程中有可能被其他对象调用它的interrupt()产生InterruptedException异常，如果程序不捕获这个异常，线程就会异常终止，进入到terminated，如果捕获了这个异常，程序就会继续执行catch语句块(可能还有finally语句块)以及以后的代码wait属于Object的成员方法，一旦一个对象调用了wait方法，必须要采用notify()和notifyAll()方法唤醒该进程，如果线程拥有某个对象或某些对象的同步锁，那么在调用wait()后，这个线程就会释放它持有的所有同步资源，而不限于这个被调用了wait()方法的对象，wait()方法同样会在wait的过程中有可能被其他对象调用了interrupt方法而产生interruptedException，效果以及处理方式同sleep()</code></pre><p>3.join()和yield()的区别</p><pre><code>Join() 当某个程序执行过程中调用其他线程的join()方法时，调用线程将被阻塞，直到被join()方法加入的join线程执行完为止。yield() 在运行期间，让出当前线程正在占用的处理器资源。</code></pre><p>4.解释序列化、反序列化、持久化</p><pre><code>序列化：Java序列化是指把Java对象转换为字节序列的过程反序列化：Java反序列化是指把字节序列恢复为Java对象的过程持久化：持久化是将内存中的数据存储到硬盘的过程</code></pre><p>5.同步锁，互斥锁，死锁</p><pre><code>同步锁：当synchronized修饰同一段代码时,多个线程不能同时进入这段代码互斥锁:当synchronized修饰的是两段代码，但是&quot;锁对象&quot;相同时，这两段代码就是互斥的。死锁的四个必要条件：1：互斥条件：一个资源每次只能被一个进程使用2：请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。3：不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺4：循环等待条件：若干进程之间形成一种头尾相接的循环等待资源</code></pre></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 线程：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;线程&lt;br&gt;
    
    </summary>
    
      <category term="interview" scheme="https://nd.ataisxt.cn/categories/interview/"/>
    
    
      <category term="线程" scheme="https://nd.ataisxt.cn/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>WEB前端HTML</title>
    <link href="https://nd.ataisxt.cn/2018/08/30/%E5%89%8D%E7%AB%AFHTML/"/>
    <id>https://nd.ataisxt.cn/2018/08/30/前端HTML/</id>
    <published>2018-08-30T14:35:37.000Z</published>
    <updated>2018-09-20T06:06:53.259Z</updated>
    
    <content type="html"><![CDATA[<p><strong> WEB前端HTML：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>WEB前端<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>###HTML<br>    Hyper Text Markup Language：超文本标记语言 </p><ul><li>什么是超文本：不仅仅是文本，还包括文本的字体颜色，样式 还包括多媒体（图片，音频，视频）</li><li>html学习内容： 学习有哪些固定的标签，还有标签内部有哪些属性和标签和标签之间的嵌套关系</li></ul><p>###通过Eclipse创建html文件 </p><ul><li>新建文件-&gt; other-&gt;搜索html </li></ul><p>###html结构</p><pre><code>&lt;!DOCTYPE html&gt;   //文档声明 告诉浏览器使用html的哪个版本来解析页面内容 ，此写法是告诉浏览器用最新的html5的版本解析 &lt;html&gt;//所有内容都在html标签内部 除了 文档声明    &lt;head&gt;//头 ：里面的内容是给浏览器看的 比如使用什么编码     &lt;/head&gt;    &lt;body&gt;//体 ：里面的内容是给用户看的     &lt;/body&gt;&lt;/html&gt;</code></pre><p>####head里面的标签</p><pre><code>&lt;meta charset=&quot;UTF-8&quot;&gt;：告诉浏览器使用哪种字符集解析&lt;title&gt;Insert title here&lt;/title&gt; 告诉浏览器 页面标题是什么，title还可以起到优化SEO的作用（让搜索引擎尽快搜索到此页面） keywords的作用：让搜索引擎尽快的找到本页面</code></pre><p>###Body内部的标签</p><p>####文本标签</p><pre><code>1. &lt;h1&gt;&lt;/h1&gt;.......&lt;h6&gt;&lt;/h6&gt; 内容标题- align：left/center/right  水平对齐方式2. &lt;p&gt;&lt;/p&gt;    段落标签 ，每个段落标签独占一行并且上下会留有空白区域3. &lt;hr&gt; 水平分割线4. &lt;br&gt; 换行</code></pre><p>####列表标签</p><ol><li><p>无序列表：</p><pre><code>&lt;ul type=&quot;circle&quot;&gt; &lt;!-- u:unordered 无序 l:list 列表 --&gt;    &lt;li&gt;刘备&lt;/li&gt;&lt;!--l:list列表 i:item 项  --&gt;    &lt;li&gt;貂蝉&lt;/li&gt;    &lt;li&gt;孙尚香&lt;/li&gt;    &lt;li&gt;孙悟空&lt;/li&gt;&lt;/ul&gt;</code></pre></li><li><p>有序列表</p><pre><code>&lt;ol&gt;    &lt;li&gt;打开冰箱门&lt;/li&gt;     &lt;li&gt;把大象装进去&lt;/li&gt;    &lt;li&gt;关上冰箱门&lt;/li&gt;    &lt;li&gt;啦啦啦&lt;/li&gt;&lt;/ol&gt;</code></pre></li></ol><ul><li>常见属性： type 控制每个列表项前面的表示的（a A i I 1默认） start 列表数值的起始值  reversed 倒序</li></ul><ol start="3"><li><p>定义列表</p><pre><code>&lt;h3&gt;定义列表&lt;/h3&gt;&lt;dl&gt;&lt;!-- defined list 定义一个列表 --&gt;    &lt;dt&gt;凉菜&lt;/dt&gt;&lt;!--defined title 定义标题 --&gt;    &lt;dd&gt;老醋花生&lt;/dd&gt;&lt;!--defined data 定义数据  --&gt;    &lt;dd&gt;花毛一体&lt;/dd&gt;    &lt;dd&gt;大拌菜&lt;/dd&gt;    &lt;dt&gt;炒菜&lt;/dt&gt;    &lt;dd&gt;宫保鸡丁&lt;/dd&gt;    &lt;dd&gt;小炒肉&lt;/dd&gt;    &lt;dd&gt;木须肉&lt;/dd&gt;&lt;/dl&gt;</code></pre></li><li><p>列表嵌套</p></li></ol><ul><li>有序和无序列表可以任意嵌套多层</li></ul><p>###分区标签（元素） div和span </p><ul><li>对页面进行分区有两大好处：</li></ul><ol><li>可以多个页面复用同一个区域的内容</li><li>可以对整个区域的内容进行统一管理</li></ol><ul><li>分区元素本身没有显示效果，起到容器的作用</li><li>div： 块级分区 独占一行 </li><li>span： 行内分区 和多个行内分区元素 共占一行 </li><li><p>通常一个页面会分为三大区域</p><pre><code>&lt;body&gt;    &lt;div&gt;头部区域&lt;/div&gt;    &lt;div&gt;正文区域&lt;/div&gt;    &lt;div&gt;尾/脚部区域&lt;/div&gt;&lt;/body&gt;</code></pre></li><li>在html5中提出了几个分区元素 效果和div一样，但是代码可读性增强了<pre><code>&lt;body&gt;    &lt;header&gt;头部区域&lt;/header&gt;    &lt;article&gt;正文区域&lt;/article&gt;    &lt;footer&gt;脚部区域&lt;/footer&gt;&lt;/body&gt;</code></pre>####元素的分类</li><li>块级元素：独占一行<br>  包括： h1-h6, p,div,hr</li><li>行内元素：和多个行内元素共占一行<br>  包括：span, <i></i>和 <em></em>（斜体）<b></b>和<strong></strong>(粗体)  <u></u>下划线   <s></s>和<del></del>删除线<br>####行内元素空格折叠现象</li><li>行内元素中空格如果有多个只能识别一个空格<br>####需要转义的常见特殊字符 实体引用</li><li>空格： &nbsp;</li><li>&lt; : &lt;</li><li><blockquote><p>: &gt;</p></blockquote></li><li>换行：<br></li></ul><p>###图片元素</p><ul><li><img>属于单标签</li><li>常见属性：</li></ul><ol><li>alt：当图片不能正常显示的时候显示此文本</li><li>src：写图片的路径，路径分为两种：</li></ol><ul><li>绝对路径：以http开头的路径，此路径可以指向本网站也可以指向其它网站(盗链，盗链图片如果原网站图片发生改变则不能正常显示)</li><li>相对路径：相对于当前页面html文件 1. 图片和页面文件在同一个文件夹下，直接写文件名，2. 图片在页面文件的上一层文件夹 ../文件名  3. 在页面文件的下一层文件夹  文件夹名/文件夹名/文件名</li><li>路径总结： 如果是站内资源使用相对路径，站外资源使用绝对路径</li><li>图床：专门存放图片的网站，使用图床可以节省本站空间</li></ul><ol start="3"><li>title:图片标题 当鼠标悬停在图片上面的时候显示</li><li>width：设置图片的宽度，两种方式：像素和百分比，如果只设置宽度 高度会保证宽高比的情况下自动跟着宽度改变</li><li>height: 设置图片的高度，两种方式：像素和百分比。</li></ol><ul><li>img支持的图片格式： jpg  png  gif</li></ul><p>####Map 图像地图</p><ul><li>什么是图像地图： 可以将图片的某个区域作为可点击的链接</li><li><p>使用方式：</p><pre><code>&lt;!-- usemap:使用地图 #代表当前页面 --&gt;&lt;img alt=&quot;&quot; src=&quot;../imgs/b.jpg&quot; usemap=&quot;#mymap&quot;&gt;&lt;!-- 为了保证兼容性问题 把name和id都写上  --&gt;&lt;map name=&quot;mymap&quot; id=&quot;mymap&quot;&gt;    &lt;!-- area区域  shape形状 rect矩形 coords坐标--&gt;    &lt;area shape=&quot;rect&quot; coords=&quot;0,0,200,200&quot;             href=&quot;../imgs/2.gif&quot;&gt;    &lt;area shape=&quot;circle&quot; coords=&quot;663,473,90&quot;         href=&quot;../imgs/d.jpg&quot;&gt;&lt;/map&gt;</code></pre></li><li>map中的id和name作用是让图片能够找得到此地图</li><li>area常见属性： shape表示形状 常用有circle和rect</li><li>href：值为一个路径，可以写相对路径和绝对路径，路径可以指向页面，也可以指向文件（浏览器可以打开的文件直接浏览，不能打开的文件则下载）</li></ul><p>###超链接 a标签</p><ul><li>如果a标签没有添加href属性 就相当于一个文本不是超链接</li><li>href属性和图像地图中的href作用一样</li><li>target=”_blank” 开启一个新的页面</li><li>锚点用法： 需要先创建锚点:<a id="a" name="a"></a>, 然后通过a标签跳转到锚点的位置：<a href="#a">跳转到锚点</a></li><li>img标签放在a标签内部 则图片就可以被点击了<br>###练习：1号美女  2号美女   3号美女    4号帅哥</li></ul><p>###表格 table</p><ul><li>接触标签有 table tr td</li><li>table的属性：align水平对齐 width宽度 border边框 cellspacing边框和单元格的距离 cellpadding内容和单元格的距离 </li><li>td的属性：colspan跨列  rowspan跨行 align水平对齐</li><li>caption标签</li><li>分组标签：<thead> <tbody> <tfoot>  没有任何显示效果，提高代码可读性</tfoot></tbody></thead></li></ul><p>###表单</p><ul><li>表单的作用是收集用户的数据提交到服务端</li><li><p>表单中的控件包括： 文本框、密码框、按钮、下拉列表、单选、复选、时间选择、文件选择、文本域<br>####文本框 </p><pre><code>&lt;input type=&quot;text&quot; placeholder=&quot;占位文本&quot; maxlength=&quot;最大字符长度&quot; readonly=&quot;只读&quot; &gt;</code></pre><p>####密码框</p><pre><code>&lt;input type=&quot;password&quot; maxlength&gt;</code></pre></li></ul><p>####单选</p><pre><code>&lt;input type=&quot;radio&quot; checked默认选中&gt;</code></pre><p>####多选、复选框</p><pre><code>&lt;input type=&quot;checkbox&quot; id=&quot;aaa&quot;&gt;  &lt;label for=&quot;aaa&quot;&gt;xxx&lt;/label&gt;</code></pre><p>####时间</p><pre><code>&lt;input type=&quot;date&quot; &gt;</code></pre><p>####文件</p><pre><code>&lt;input type=&quot;file&quot; &gt;</code></pre><p>####下拉选</p><pre><code>&lt;select name&gt;        &lt;option value selected&gt;&lt;/option&gt;&lt;select&gt;</code></pre><p>####文本域 </p><pre><code>&lt;textarea rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;&lt;/textarea&gt;</code></pre><p>####隐藏域</p><pre><code>&lt;input type=&quot;hidden&quot;&gt;</code></pre><p>####按钮</p><pre><code>&lt;input type=&quot;submit/reset/button&quot; value=&quot;按钮标题&quot;&gt;</code></pre><p>####代码</p><ol><li><p>图像地图Map  </p><pre><code>&lt;img usemap=&quot;#mymap&quot;&gt;&lt;map name=&quot;mymap&quot; id=&quot;mymap&quot;&gt;&lt;area shape=&quot;rect/circle&quot; coords=&quot;&quot; href=&quot;&quot;&gt;&lt;/area&gt;&lt;/map&gt;</code></pre></li><li><p>超链接 a</p><pre><code>&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;超链接&lt;/a&gt;&lt;a id name &gt;&lt;/a&gt;   &lt;a href=&quot;#id/name&quot;&gt;跳转&lt;/a&gt;</code></pre></li><li><p>表格 </p><pre><code>&lt;table border cellspacing cellpadding width align&gt;&lt;tr&gt;行&lt;td rowspan  colspan align&gt;列&lt;th&gt;表头&lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt;  &lt;caption&gt; 表的标题</code></pre></li><li><p>表单  文本框 密码框 单选 多选  文件 日期  隐藏域 按钮 下拉选 文本域</p><pre><code>&lt;input type=&quot;text/password/radio/checkbox/file/date/hidden/submit/reset/button&quot; name value id checked placeholder readonly maxlength&gt;&lt;label for=&quot;id&quot;&gt;&lt;select name&gt;&lt;option value selected&gt;&lt;textarea rows   cols &gt;</code></pre></li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; WEB前端HTML：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;WEB前端&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://nd.ataisxt.cn/categories/front-end/"/>
    
    
      <category term="HTML" scheme="https://nd.ataisxt.cn/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Java面向对象-雷霆战机</title>
    <link href="https://nd.ataisxt.cn/2018/07/23/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%9B%B7%E9%9C%86%E6%88%98%E6%9C%BA/"/>
    <id>https://nd.ataisxt.cn/2018/07/23/Java面向对象雷霆战机/</id>
    <published>2018-07-23T05:06:55.000Z</published>
    <updated>2018-09-22T20:59:28.746Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Java面向对象-雷霆战机：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>雷霆战机搭建过程</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Java面向对象-雷霆战机：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="after-end" scheme="https://nd.ataisxt.cn/categories/after-end/"/>
    
    
      <category term="雷霆战机\小游戏" scheme="https://nd.ataisxt.cn/tags/%E9%9B%B7%E9%9C%86%E6%88%98%E6%9C%BA-%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>环境搭建(附链接)</title>
    <link href="https://nd.ataisxt.cn/2018/06/23/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%BF%9E%E6%8E%A5%E8%AF%A6%E7%BB%86%E7%89%88/"/>
    <id>https://nd.ataisxt.cn/2018/06/23/环境搭建连接详细版/</id>
    <published>2018-06-22T19:06:55.000Z</published>
    <updated>2018-09-22T20:58:38.916Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 环境搭建(附链接)：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>第一步：搭建环境。</the></p><pre><code>安装新建虚拟机CentOS。环境搭建好之后。</code></pre><p>第二步：安装jdk（我使用的第一种方法）</p><p>*<a href="https://blog.csdn.net/qciwyy/article/details/77449369" target="_blank" rel="noopener">linux系统下安装jdk</a></p><p>第三步：安装mysql服务器（我使用的方法2）</p><p>*<a href="https://blog.csdn.net/qciwyy/article/details/77526895" target="_blank" rel="noopener">linux系统安装mysql-server</a></p><p>第四步：修改mysql-server登陆密码</p><p>*<a href="https://blog.csdn.net/qciwyy/article/details/77529153" target="_blank" rel="noopener">修改mysql root密码</a></p><p>第五步：mysql创建用户并授予远程访问权限</p><p>*<a href="https://blog.csdn.net/qciwyy/article/details/77643595" target="_blank" rel="noopener">linux系统给mysql创建新用户并授予远程访问权限</a></p><p>第六步：mysql表明区分大小写转换为不区分大小写（这样为了避免在设计表的时候有大写和小写出现异常）</p><p>*<a href="https://blog.csdn.net/qciwyy/article/details/77648715" target="_blank" rel="noopener">linux下mysql表名不区分大小写</a></p><p>第七步：MySQL数据库从Windows迁移到linux</p><p>*<a href="https://blog.csdn.net/QCIWYY/article/details/77567154" target="_blank" rel="noopener">MySQL数据库从Windows迁移到linux</a></p><p>第八步：CentOS中安装与配置Tomcat</p><p>*<a href="https://blog.csdn.net/qciwyy/article/details/77645638" target="_blank" rel="noopener">linux系统安装tomcat</a></p><p>第九步：Tomcat安装成功后， 将需要部署的java web项目复制到/usr/local/tomcat/webapps下，重新起到tomcat服务</p><pre><code>浏览器输入：localhost:8080/HelloWorld  成功访问。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 环境搭建(附链接)：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="servicer" scheme="https://nd.ataisxt.cn/categories/servicer/"/>
    
    
      <category term="JDK Tomcat MySql" scheme="https://nd.ataisxt.cn/tags/JDK-Tomcat-MySql/"/>
    
  </entry>
  
  <entry>
    <title>Html部分</title>
    <link href="https://nd.ataisxt.cn/2018/06/23/%E9%9D%A2%E8%AF%95%E9%A2%98Html/"/>
    <id>https://nd.ataisxt.cn/2018/06/23/面试题Html/</id>
    <published>2018-06-22T19:06:55.000Z</published>
    <updated>2018-09-22T21:00:09.188Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Html部分：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>一、    索引有几种类型？</the></p><pre><code>a)    4种类型：    1.    唯一索引：        不允许其中任何两行具有相同索引值得索引。    2.    非唯一索引：    1.    主键索引：        数据库表经常有一列或者多列组合，其值唯一标识表中的每一行。该列称为表的主键。在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。    3.    聚集索引：        在聚集索中，表中行的物理顺序与键值得逻辑（索引）顺序相同。一个表只能包含一个聚集索引</code></pre><p>二、    CSS选择器包括哪些？</p><pre><code>a)    类选择器：        用“.”来标识b)    标签选择器：    用“HTML”标签来标识c)    ID选择器：        用“#”号来标识</code></pre><p>三、    JavaScript包括哪些数据类型？</p><pre><code>a)    6种数据类型1.    Undefined   原始数据类型2.    Null        原始数据类型3.    String        原始数据类型4.    Number        原始数据类型5.    Boolean        原始数据类型6.    Object        对象数据类型</code></pre><p>四、    Servlet生命周期？</p><pre><code>a)    （Web容器）服务器启动并加载Servlet后，Servlet生命周期开始，容器运行init方法，请求到达时运行其service方法，请求到达，service方法自动派遣运行与请求对应的doGet或doPost方法，当服务器决定将实例销毁的时候调用其destroy方法。</code></pre><p>五、    什么是Servlet？</p><pre><code>a)    Servlet就是处理服务器与客户端交互的一个组件，主要用于响应HTTP请求，一般在MVC中的C(controller)控制层</code></pre><p>六、    B/S和C/S的区别？</p><pre><code>a)    B/S是浏览器与服务器        不安全        维护成本低     一般用于广域网  b)    C/S是客户端与服务器        安全        维护成本高   一般用于局域网</code></pre><p>七、    MVC各个部分都有哪些技术来实现？</p><pre><code>a)    M是model简写 也就是业务逻辑层（通过javaBean，EJB组件实现）b)    V是View简写，也就是应用的表面层（由jsp页面产生）c)    C是controller简写，也就是提供应用的处理过程控制（一般是一个Servlet），d)    通过这种设计模式把应用逻辑，处理过程，和显示逻辑分成不同的组件，这些组件可以交互和重用。</code></pre><p>八、    Servlet如何获取表单的参数？</p><pre><code>a)    通过request.getParamenter();九、    JSP和Servlet的异同？他们之间的联系是什么？a)    JSP本质上就是Servlet技术的拓展，也就是简易版的servlet。b)    JSP更加强调应用的外表表达，侧重于视图，Servlet更加注重于控制逻辑。c)    JSP编译后是类Servletd)    JSP是Java和HTML组合成的一个扩展名为.jsp的文件</code></pre><p>十、    Servlet中的转发（Forword）和重定向(Redirect)有什么区别？</p><pre><code>a)    转发是一个请求的延续（1个请求），可以共享request的数据b)    重定向是开始一个新的请求，（2个请求），不可以共享request数据c)    地址栏：转发地址栏不发生变化，重定向地址栏是会变化的</code></pre><p>十一、    Cookie和Session的区别？</p><pre><code>a)    存储位置：Cookie存在浏览器，Session存储在服务器b)    安全角度：cookie不安全，session安全c)    数据量：  cookie不可以存大数据，session可以存大数据，重要数据等.</code></pre><p>十二、    Http中get和post的 区别</p><pre><code>a)    在客户端：Get方式在通过URL提交数据，数据在URL可以看到,POST方式，数据放置在HTML HEADER内提交b)    Get方法提交的数据最多只有1024字节，post则没有限制c)    Get不安全，Post安全</code></pre><p>十三、    JSP有哪些内置对象？</p><pre><code>a)    Request  response out                : 输入输出对象b)    Session application pageContext        ：作用域通信对象c)    Page config                            ：Servlet对象d)    Exception                            ：异常对象</code></pre><p>十四、    JSP乱码如何解决？</p><pre><code>a)    3种方法    1.    JSP页面乱码：&lt;%@page contentType=”text/html;charset=utf-8”%&gt;    2.    表单提交中文时候出现的乱码：request.setCharacterEncoding(“utf-8”);    3.    数据库连接出现乱码：    useUnicode=true&amp;characterEncoding=utf-8;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Html部分：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="interview" scheme="https://nd.ataisxt.cn/categories/interview/"/>
    
    
      <category term="面试资料" scheme="https://nd.ataisxt.cn/tags/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架部分</title>
    <link href="https://nd.ataisxt.cn/2018/06/23/%E9%9D%A2%E8%AF%95%E9%A2%98Spring%E6%A1%86%E6%9E%B6/"/>
    <id>https://nd.ataisxt.cn/2018/06/23/面试题Spring框架/</id>
    <published>2018-06-22T19:06:55.000Z</published>
    <updated>2018-09-22T21:00:33.069Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Spring框架部分：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>一、    你用过spring框架吗？</p><pre><code>a)    用过，spring框架是轻量级，代码侵入性低,可集成，用来简化web开发的应用开发的框架。 </code></pre><p>二、    Spring容器是什么？</p><pre><code>a)    是Spring框架当中的一个核心模块，用于对对象进行管理。</code></pre><p>三、    什么是IOC什么是DI？DI如何实现的？</p><pre><code>a)    IOC叫控制反转，是Inversion of Control 的缩写。所谓的“控制反转”就是对组件对象控制权的转移，从程序代码本身转移到了外部容器，由容器来创建对象并管理对象之间的依赖关系。b)    DI 叫依赖注入，是Dependency Control的缩写，是对IOC更简单的诠释。</code></pre><p>四、    Spring中的Bean的作用域有哪些？</p><pre><code>a)    两个作用域    1.    Singleton: 表示Bean以单例的形式存在。一般情况下，无状态或状态不可变的类适合单例模式。    2.    Prototype:    表示每次从容器中调用Bean时，都会返回一个新的实例。</code></pre><p>五、    请你阐述下SpringMVC分为几大组件？SpringMVC的执行流程（也就是这五大组件的关系）</p><pre><code>a)    五大组件：    1.    dispatcherServlet     (前端控制器)    2.    handlerMapping        （前端控制器秘书）    3.    controller            （处理器）    4.    ViewResolver        （视图解析器）    5.    ModelAndView        （模型和视图）b)    dispatcherServlet前段控制器收到请求之后，依据HandlerMapping的配置调用相应的Controller来处理controller将处理结果封装成ModeAndView发送给前段控制器DispatcherServletdispatcherServlet前端控制器会依据ViewResolver的配置调用相应的配置，调用相应的视图对象（比如JSP）来展现数据</code></pre><p>六、    你了解Java反射机制吗？Java中哪些地方用到了反射？</p><pre><code>a)    就是在运动状态中，对于任意一个类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取信息以及动态调用对象的方法的功能称为反射。b)    Spring框架底层就是通过反射实现的。</code></pre><p>七、    什么是MyBatis框架？</p><pre><code>a)    作用就是封装了JDBC,简化了数据库的访问代码。</code></pre><p>八、    MyBatis中的Mapper映射器要满足那些要求？</p><pre><code>a)    Mapper.xml的    1.    Namespace        ==     接口名    2.    sql语句id        ==    方法名    3.    parameterType    ==  方法参数类型    4.    resultType        ==    返回值类型</code></pre><p>九、    解释一下什么叫AOP Aspect Oriented Programming（面向切面编程）？</p><pre><code>a)    AOP可以对业务逻辑的各个部分进行隔离，也就是可以降低业务逻辑各部分的耦合度，提高程序的可重用性，提高开发效率。b)    主要的功能有5点（或更多）：    1.    日志记录    2.    性能统计    3.    安全控制    4.    事务处理    5.    异常处理</code></pre><p>十、    AOP和OOP有什么区别？</p><pre><code>a)    AOP、OOP在字面上虽然非常类似，但却是面向不同领域的两种设计思想。b)    OOP（面向对象编程）针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。c)    而AOP则是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。d)    总之，AOP可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。</code></pre><p>十一、    什么是AJAX?</p><pre><code>a)    ajax是一种用来改善用户体验的技术，也就是局部刷新，其本质是利用浏览器内部的一个对象(XMLHttpRequest)异步的向服务器发送请求。</code></pre><p>十二、    ajax对象的几个重要的属性？</p><pre><code>a)    5个    1.    Onreadystatechange:        用来绑定事件处理函数的    2.    Readystate：            有5个值（0,1,2,3,4）表示对ajax对象与服务通信的状态（进展）    3.    responseText：            获得服务器返回的文本    4.    responseXML：            获得服务器返回的xml文档    5.    status：                获得服务器返回的状态码（200/202/400/404/500）</code></pre><p>十三、    AJAX都有哪些优点和缺点</p><pre><code>优点:1.    最大的一点是页面无刷新，用户的体验非常好。2.    使用异步方式与服务器通信，具有更加迅速的响应能力。3.    可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，ajax的原则是“按需取数据”，可以最大程度的减少冗余请求，和响应对服务器造成的负担。4.    基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。ajax的缺点:6.    ajax不支持浏览器back按钮。7.    安全问题 AJAX暴露了与服务器交互的细节。8.    对搜索引擎的支持比较弱。9.    破坏了程序的异常机制。10.    不容易调试</code></pre><p>十四、    JSON是什么？语法是怎么样的？</p><pre><code>a)    是一种轻量级的数据交换模式，比xml要小，解析速度更加快。b)    使用JSON表示一个对象{“属性名”：属性值，“属性名”：属性值};</code></pre><p>十五、    面向对象和面向过程有什么区别？</p><pre><code>a)    面向过程是一种以过程为中心的编程思想。就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步的实现，使用的时候一个一个依次调用就可以了。注重的是过程。b)    面向对象是一种以事务为中心的编程思想。面向对象的方法主要是把事务给对象化，对象包括属性和行为，忽略某些细节，注重的是结果。c)    比如我想去厦门，面向过程是我开什么车去，怎么开，之间的过程是什么，都要很详细。面向对象是我要去厦门，到厦门即可，不管你是怎么到的。</code></pre><p>十六、    Oracle和Mysql有什么区别？</p><pre><code>a)    库函数不同b)    Oracle是用表空间来管理的，Mysql不是c)    分页查询的时候mysql是用limt   oracle用rownumd)    Sql的语法不同</code></pre></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Spring框架部分：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="interview" scheme="https://nd.ataisxt.cn/categories/interview/"/>
    
    
      <category term="面试资料" scheme="https://nd.ataisxt.cn/tags/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>OOP</title>
    <link href="https://nd.ataisxt.cn/2018/06/23/%E9%9D%A2%E8%AF%95%E9%A2%98OOP/"/>
    <id>https://nd.ataisxt.cn/2018/06/23/面试题OOP/</id>
    <published>2018-06-22T19:06:55.000Z</published>
    <updated>2018-09-29T04:48:07.148Z</updated>
    
    <content type="html"><![CDATA[<p><strong> OOP：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p><strong>OOP</strong></p><pre><code>1.重写与重载的区别    重载：同一个类中，方法名相同，参数列表不同，编译器在编译时会自动根据签名来绑定调用不同的方法。    重写：父子类中，方法名和参数列表相同，方法体不同，重写方法被调用时，看对象的类型。    重载是发生在同一个类中，方法名相同，参数列表不同，遵循编译器绑定，根据引用的类型绑定方法；重写是发生在父子类中，方法名相同，参数列表相同，遵循运行期绑定，根据对象类型绑定方法。</code></pre><p>2.面向对象的三大特征</p><pre><code>封装：1.类：封装的是对象的数据和行为；      2.方法：封装的功能是具体的实现；      3.访问控制修饰符：封装的是数据和行为的访问权限。继承：1.目的：避免代码的重复，实现代码的重用；      2.父类中：所有子类共有的，子类中：子类所特有的；      3.子类继承父类后：具有自己所特有的和父类的数据和行为。封装和继承都提高了代码的复用性多态：1.意义：行为的多态：同一类型的引用指向不同的对象时，有不同的实现；对象的多态：同一对象被造型为不同的类型时，有不同的功能。      2. 向上造型：父类型的引用指向子类的对象，能点出来什么，看引用的类型。子类继承父类, 但是没有实现其中的方法, 当进行向上造型时, 调用的方法就是父类的。      3.变现形式：重载，重写。</code></pre><p>3.Java编译运行过程</p><pre><code>Java源程序(.java文件)→通过java命令编译源文件→Java字节码文件(.class文件)→通过java命令启动JVM→加载并运行.class文件</code></pre><p>4.抽象类Abstract与接口interfae的区别</p><pre><code>抽象类可以有构造方法，接口不能有构造方法抽象类可以有普通成员变量和普通方法，接口只能有常量和抽象方法抽象类可以有静态方法，接口不能有静态方法抽象类的访问控制修饰符可以是public protected和默认，接口只能是public一个类可以实现多个接口，但只能继承一个类，接口间可以多继承</code></pre><p>5.JavaBean规范</p><pre><code>1要有包(类必须写在包里)  2有默认构造器3有get/set方法  4实现序列化接口</code></pre><p>6.final，finally，finalize的区别</p><pre><code>final用于声明属性，方法和类，分别表示属性不可变，方法不能被重写，类不能被继承finally是异常处理机制中处理语句结构中的一部分，表示总是执行，通常用于关闭流或连接，释放资源等操作finalize是object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件。</code></pre><p>7.静态代码块，构造代码块，构造函数执行的顺序</p><pre><code>如果一个类有父类：父类的静态代码块 子类静态代码块 父类代码块  父类构造方法  子类代码块 子类构造方法 如果没有父类：静态代码块  代码块  构造方法注：静态资源只会被加载一次</code></pre><p>8.编写一个单例模式、和排序算法</p><pre><code>public class A{    private static A a = new A();    private A(){}    public static A getA(){return a;}}public class B{    private static B b;    private B(){}    public syh... static B getB(){    if(b==null){b=new B();}return b;}}for(int i=0;i&lt;ary.length-1;i++){    for(int j=0;j&lt;ary.length-1-i;j++){    if(ary[j]&gt;ary[j+1]){.......}}}</code></pre><p>9.简单的递归 </p><pre><code>9-1：兔子生兔子（斐波拉契数列）：1、1、2、3、5、8、13、21    public int tuzi(int n ){            if(n==1||n==2){return 1;}    else{return tuzi(n-1)+tuzi(n-2)}} 9-2：猴子吃桃：1、4、10、22、46    public int houzi(int n){    if(n==1){return 1;}else{    return 2*houzi(n-1)+2;}}}</code></pre><ol start="10"><li><p>下列代码输出结果（10  0  20  99）</p><pre><code>class ValHold {public int i = 10;}public class ObParm {public static void main(String[] args) {    ObParm o = new ObParm();    o.amethod();}public void amethod() {    int i = 99;        ValHold v = new ValHold();    v.i = 30;        another(v, i);    System.out.println(v.i + &quot; &quot; + i);}public void another(ValHold v, int i) {        i = 0;    v.i = 20;        ValHold vh = new ValHold();        v = vh;            System.out.println(v.i + &quot; &quot; + i);}}</code></pre></li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; OOP：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="interview" scheme="https://nd.ataisxt.cn/categories/interview/"/>
    
    
      <category term="OOP" scheme="https://nd.ataisxt.cn/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>环境搭建Centos7.4</title>
    <link href="https://nd.ataisxt.cn/2018/06/23/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAcentos7.4/"/>
    <id>https://nd.ataisxt.cn/2018/06/23/环境搭建centos7.4/</id>
    <published>2018-06-22T19:06:55.000Z</published>
    <updated>2018-09-22T20:58:30.720Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 环境搭建Centos7.4：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><blockquote><p>##安装jdk</p></blockquote><ol><li><p>下载jdk</p><pre><code>wget http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.rpm?AuthParam=1536633909_fcc6805cd13d0e7e32ce7e7b69ce0620</code></pre><p>2.将文件放至/usr/local</p><pre><code>scp /Users/leelom/Downloads/jdk-7u79-linux-x64.rpm root@123.xxx.xx.xx:/usr/local</code></pre></li><li><p>安装jdk</p><pre><code>rpm -ivh jdk-8u181-linux-x64.rpm</code></pre></li><li><p>查询java版本号</p><pre><code>此处出现版本号 jdk1.8.0_181 </code></pre><p>4.修改配置</p><pre><code>vi /etc/profile</code></pre></li><li>复制以下内容</li></ol><p>文件名不同 复制内容不同</p><pre><code>    JAVA_HOME=/usr/java/jdk1.8.0_181-amd64    JRE_HOME=/usr/java/jdk1.8.0_181-amd64/jre    PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin    CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib    export JAVA_HOME JRE_HOME PATH CLASSPATH###添加以下文档     JAVA_HOME=/usr/java/jdk1.8.0_181     JRE_HOME=/usr/java/jdk1.8.0_181/jre     PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin     CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib     export JAVA_HOME JRE_HOME PATH CLASSPATH</code></pre><blockquote><p>##安装Tomcat<br>此处为tomcat9版本</p></blockquote><p>1.下载tomcat</p><pre><code>wget http://mirrors.sonic.net/apache/tomcat/tomcat-9/v9.0.11/bin/apache-tomcat-9.0.11.tar.gz</code></pre><ol start="2"><li><p>解压压缩包</p><p> tar -zxf apache-tomcat-9.0.11.tar.gz<br>3.删除压缩包</p><p>  rm -rf apache-tomcat-9.0.11.tar.gz<br>4.文件移动</p><p>  mv  apache-tomcat-9.0.11 tomcat </p></li><li><p>启动tomcat</p><pre><code> [root@admin ~]# /usr/local/tomcat/bin/startup.sh //启动tomcat  Using CATALINA_BASE: /usr/local/tomcat  Using CATALINA_HOME: /usr/local/tomcat  Using CATALINA_TMPDIR: /usr/local/tomcat/temp  Using JRE_HOME: /usr/java/jdk1.7.0/jre  Using CLASSPATH: /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar </code></pre></li><li>浏览器  <a href="http://ip:8080" target="_blank" rel="noopener">http://ip:8080</a>  验证</li><li>修改配置 tomcat server.xml<ul><li><a href="http://blog.csdn.net/jimmy609/article/details/37766069" target="_blank" rel="noopener">server.xml</a></li></ul></li></ol><blockquote><p>##安装MySQL</p></blockquote><ul><li><a href="https://blog.csdn.net/z13615480737/article/details/78906598" target="_blank" rel="noopener">CentOS 7.4下使用yum安装MySQL5.7.20 最简单的</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 环境搭建Centos7.4：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="servicer" scheme="https://nd.ataisxt.cn/categories/servicer/"/>
    
    
      <category term="Centos7.4   Jdk8  Tomcat9  Mysql5.7.20" scheme="https://nd.ataisxt.cn/tags/Centos7-4-Jdk8-Tomcat9-Mysql5-7-20/"/>
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="https://nd.ataisxt.cn/2018/06/23/Java%E5%9F%BA%E7%A1%80Basic/"/>
    <id>https://nd.ataisxt.cn/2018/06/23/Java基础Basic/</id>
    <published>2018-06-22T19:06:55.000Z</published>
    <updated>2018-09-22T21:03:48.252Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Java基础：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p><strong>Java开发环境:</strong></p></blockquote><p><em>1)java编译运行过程:————-常见面试题</em></p><pre><code>1.1)编译期:.java源文件，经过编译，生成.class字节码文件1.2)运行期:JVM加载.class并运行.class    特点:跨平台、一次编程到处使用</code></pre><p>  <em>2)名词解释:————-常见面试题</em></p><pre><code>2.1)JVM:java虚拟机        加载.class并运行.class2.2)JRE:java运行环境        除了包含JVM以外还包含了运行java程序所必须的环境    JRE=JVM+java系统类库(小零件)2.3)JDK:java开发工具包        除了包含JRE以外还包含了开发java程序所必须的命令工具    JDK=JRE+编译、运行等命令工具说明:  2.1)运行java程序的最小环境为JRE  2.2)开发java程序的最小环境为JDK</code></pre><p>  <em>3)配置环境变量—————了解</em></p><pre><code>3.1)JAVA_HOME:指向jdk的安装路径3.2)CLASSPATH:表示类的搜索路径(一般简写为.)3.3)PATH:指向jdk下的bin目录</code></pre><blockquote><p><strong>eclipse:</strong></p></blockquote><pre><code>1)IBM、开源的、免费的、不需要安装仅需解压即可2)开发步骤:  2.1)新建Java项目/工程---------------小区  2.2)新建Java包----------------------楼+单元  2.3)新建Java类----------------------房子        main中:      System.out.println(&quot;HelloWorld&quot;);3)注释:解释性文字  3.1)单行注释://  3.2)多行注释:/* */  3.3)文档注释:/** */</code></pre><blockquote><p><strong>变量:存数的，代词，指代的就是它所存的那个数</strong></p></blockquote><pre><code>1)声明:    int a; //声明一个整型的变量，名为a    int b,c,d; //声明三个整型的变量，名为b,c,d2)初始化:第一次赋值  2.1)声明的同时初始化:        int a = 250; //声明整型变量a并赋值为250  2.2)先声明后初始化:        int a;   //声明整型变量a         a = 250; //给变量a赋值为2503)使用:  3.1)对变量的使用就是对它所存的那个数的使用        int a = 5;        int b = a+10; //取出a的值5，加10后，再赋值给整型变量b        System.out.println(b);   //输出变量b的值15        System.out.println(&quot;b&quot;); //输出b，双引号中的原样输出        a = a+10; //取出a的值5，加10后，再赋值给a                  //在a本身基础之上增10        System.out.println(a); //15  3.2)变量在使用时必须类型匹配        int a = 3.14; //编译错误，数据类型不匹配  3.3)变量在用之前必须声明并初始化        System.out.println(m); //编译错误，m未声明         int m;         System.out.println(m); //编译错误，m未初始化4)命名:  4.1)只能包含字母、数字、_和$符，并且不能以数字开头  4.2)严格区分大小写  4.3)不能使用关键字  4.4)可以中文命名，但不建议      建议&quot;英文的见名知意&quot;、&quot;驼峰命名法&quot;</code></pre><blockquote><p><strong>基本数据类型:共8种</strong></p></blockquote><pre><code>1)int:整型，4个字节，-21个多亿到21个多亿      1.1)整数直接量默认为int型，但不能超范围，超范围则编译错误      1.2)两个整数相除，结果还是整数，小数位无条件舍弃(不会四舍五入)      1.3)运算时超范围，则发生溢出，溢出是需要避免的2)long:长整型，8个字节，很大很大很大      2.1)表示长整型直接量，需在数字后加L或l      2.2)运算时若有可能溢出，建议在第1个数字后加L      2.3)System.currentTimeMillis()用于获取自          1970.1.1零时到此时此刻的毫秒数3)double:浮点型，8个字节，      3.1)浮点数直接量默认为double型，若想表示float需在数字后加f或F      3.2)double和float在运算时，有可能会出现舍入误差(精确运算场合不能使用)4)boolean:布尔型，1个字节        4.1)只能取值为true和false5)char:字符型，2个字节      5.1)采用Unicode字符集编码，一个字符对应一个码(0到65535之间)          表现的形式的字符char，但本质上是码int      ASCII码(&apos;a&apos;--97  &apos;A&apos;--65  &apos;0&apos;--48)      5.2)字符直接量必须放在单引号中，只能有一个      5.3)特殊符号需通过\来转义</code></pre><blockquote><p><strong>基本数据类型间的转换:</strong></p></blockquote><pre><code>数据类型从小到大依次为:  byte,short,int,long,float,double,char,  1)两种方式:    1.1)自动类型转换:小类型到大类型    1.2)强制类型转换:大类型到小类型          eg: (要转换成为的数据类型)变量      强转有可能溢出或丢失精度  2)两点规则:    2.1)整数直接量可以直接赋值给byte,short,char，但不能超出范围    2.2)byte,short,char型数据参与运算时，先一律转换为int再运算</code></pre><blockquote><p><strong>Scanner接收用户的输入:</strong></p></blockquote><pre><code>1)在package下:    import java.util.Scanner;2)在main()中:    Scanner scan = new Scanner(System.in);3)在第2步之下:    System.out.println(&quot;请输入年龄:&quot;);    int age = scan.nextInt();    System.out.println(&quot;请输入价格:&quot;);    double price = scan.nextDouble();</code></pre><blockquote><p><strong>运算符:</strong></p></blockquote><pre><code>1)算术运算符:+,-,*,/,%,++,--2)关系运算符:&gt;,&lt;,&gt;=,&lt;=,==,!= boolean3)逻辑运算符:&amp;&amp;,||,! boolean4)赋值运算符:=,+=,-=,*=,/=,%=5)字符串连接运算符:+6)条件/三目运算符:boolean?数1:数2</code></pre><blockquote><p><strong>分支结构:</strong></p></blockquote><pre><code>1)if结构:1条路2)if...else结构:2条路3)if...else if结构:多条路4)switch...case结构:多条路  优点:效率高、结构清晰  缺点:整数、相等  break:跳出switch</code></pre><blockquote><p><strong>循环:</strong></p></blockquote><pre><code>反复执行一段相同或相似的代码</code></pre><blockquote><p><strong>循环三要素:</strong></p></blockquote><pre><code>1)循环变量的初始化2)循环的条件(以循环变量为基础)3)循环变量的改变(向着循环的结束变)循环变量:在整个循环过程中所反复改变的那个数</code></pre><blockquote><p><strong>循环结构:</strong></p></blockquote><pre><code>1)while结构:先判断后执行，有可能一次都不执行2)do...while结构:先执行后判断，至少执行一次                 要素1与要素3相同时，首选do...while3)for结构:应用率最高，固定次数循环</code></pre><blockquote><p><strong>break:跳出循环</strong></p></blockquote><pre><code>continue:跳过循环体中剩余语句而进入下一次循环</code></pre><blockquote><p><strong>三种循环结构的更佳适用情况:</strong></p></blockquote><pre><code>1)while:&quot;当...&quot;        要素1与要素3不同时首选while2)do...while:&quot;直到...&quot;        要素1与要素3相同时首选do...while3)for:固定次数循环，应用率最高</code></pre><blockquote><p><strong>嵌套循环:</strong></p></blockquote><pre><code>1)循环中套循环，一般多行多列时使用，外层控制行，内层控制列2)执行规则:外层循环走一次，内层循环走所有次3)建议:嵌套层数越少越好，能用一层就不用两层，能用两层就不用三层  若需求必须要使用三层以上的循环才能解决，说明设计有问题4)break只能跳出一层循环</code></pre><blockquote><p><strong>程序=算法+数据结构————了解</strong></p></blockquote><pre><code>1)算法:解决问题的流程/步骤(顺序、分支、循环)2)数据结构:将数据按照某种特定的结构来保存           数怎么存  设计良好的/合理的数据结构会导致好的算法</code></pre><blockquote><p><strong>数组:</strong></p></blockquote><pre><code>1)是一种数据类型(引用类型)2)相同数据类型元素的集合3)数组的定义:    int[] arr = new int[10];4)数组的初始化:        int[] arr = new int[3]; //0,0,0        int[] arr = {2,5,8}; //2,5,8        int[] arr = new int[]{2,5,8}; //2,5,8        int[] arr;        arr = {2,5,8}; //编译错误，此方式只能声明同时初始化          arr = new int[]{2,5,8}; //正确5)数组的访问:  5.1)通过数组名.length可以获取数组的长度(元素的个数)        int[] arr = new int[10];          System.out.println(arr.length); //10  5.2)通过数组的下标/索引来访问元素      下标从0开始，最大到(数组的长度-1)        int[] arr = new int[3];        arr[0] = 100; //给arr中第1个元素赋值为100        arr[1] = 200; //给arr中第2个元素赋值为200        arr[2] = 300; //给arr中第3个元素赋值为300        arr[3] = 400; //数组下标越界异常        System.out.println(arr[arr.length-1]); //输出最后一个元素的值6)数组的遍历:        int[] arr = new int[10];        for(int i=0;i&lt;arr.length;i++){          arr[i] = 100;        }        for(int i=0;i&lt;arr.length;i++){          System.out.println(arr[i]);        }        for(int i=arr.length-1;i&gt;=0;i--){          System.out.println(arr[i]);        }7)数组的复制:      7.1)System.arraycopy(a,1,a1,0,4); //效率高、灵活性好      7.2)int[] a1 = Arrays.copyOf(a,6); //效率低、灵活性差          a = Arrays.copyOf(a,a.length+1); //数组的扩容/缩容8)数组的排序:      8.1)Arrays.sort(arr); //升序，效率高      8.2)冒泡排序:----车轮战          8.2.1)四个数冒三轮      8.2.2)每一轮都是从第1个元素开始冒            每一次都是和它的下一个元素比      8.2.3)冒出来的就不再参与比较了</code></pre><blockquote><p><strong>方法:</strong></p></blockquote><pre><code>1)封装一段特定的业务逻辑功能2)尽可能独立，一个方法只干一件事3)可以被反复多次调用4)减少代码的重复，有利于代码的维护，有利于团队的协作</code></pre><blockquote><p><strong>方法的定义:</strong></p></blockquote><pre><code>修饰词 返回值类型 方法名(参数列表){ //形参  方法体}</code></pre><blockquote><p><strong>方法的调用:</strong></p></blockquote><pre><code>1)无返回值: 方法名(有参传参); //实参2)有返回值: 数据类型 变量 = 方法名(有参传参);</code></pre><blockquote><p><strong>return:</strong></p></blockquote><pre><code>1)return 值; //1.1)结束方法的执行 1.2)返回结果给调用方2)return;    //2.1)结束方法的执行(在某种条件之下提前结束方法)</code></pre></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Java基础：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="after-end" scheme="https://nd.ataisxt.cn/categories/after-end/"/>
    
    
      <category term="基础" scheme="https://nd.ataisxt.cn/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
